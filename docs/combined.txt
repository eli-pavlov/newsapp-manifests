// addons/cert-manager/certificates.yaml
# Cert for ArgoCD (prod)
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: cert-argocd-weblightenment-com
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  secretName: argocd-tls
  dnsNames:
    - argocd.weblightenment.com
  issuerRef:
    name: letsencrypt-dns01-cloudflare
    kind: ClusterIssuer
---
# Cert for frontend (prod)
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: cert-newsapp-weblightenment-com
  namespace: default
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  secretName: newsapp-tls
  dnsNames:
    - newsapp.weblightenment.com
  issuerRef:
    name: letsencrypt-dns01-cloudflare
    kind: ClusterIssuer
---
# Cert for frontend (dev)
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: cert-newsapp-dev-weblightenment-com
  namespace: development
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  secretName: newsapp-dev-tls
  dnsNames:
    - newsapp-dev.weblightenment.com
  issuerRef:
    name: letsencrypt-staging
    kind: ClusterIssuer

// addons/cert-manager/issuers.yaml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-dns01-cloudflare
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: contact@weblightenment.com
    privateKeySecretRef:
      name: letsencrypt-dns01-account-key
    solvers:
      - dns01:
          cloudflare:
            apiTokenSecretRef:
              name: cloudflare-api-token-secret
              key: api-token
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-staging
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  acme:
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    email: contact@weblightenment.com
    privateKeySecretRef:
      name: letsencrypt-staging-account-key
    solvers:
      - dns01:
          cloudflare:
            apiTokenSecretRef:
              name: cloudflare-api-token-secret
              key: api-token

// addons/cert-manager/networkpolicy-certmanager-tls-egress.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-certmgr-tls-egress
  namespace: cert-manager
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
spec:
  podSelector: {}
  policyTypes:
    - Egress
  egress:
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
      ports:
        - protocol: TCP
          port: 443
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53

// addons/db-local-pv/dev/pv.yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: db-pv-dev
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
    weblightenment.io/owner-uid: "999"
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  storageClassName: local-db-dev
  persistentVolumeReclaimPolicy: Retain
  local:
    path: /mnt/oci/db/dev
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: role
              operator: In
              values: ["database"]

// addons/db-local-pv/dev/storageclass.yaml
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: local-db-dev
  annotations:
    # Create before PV and app resources
    argocd.argoproj.io/sync-wave: "-2"
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer

// addons/db-local-pv/prod/pv.yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: db-pv-prod
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
    weblightenment.io/owner-uid: "999"
spec:
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  storageClassName: local-db-prod
  persistentVolumeReclaimPolicy: Retain
  local:
    path: /mnt/oci/db/prod
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: role
              operator: In
              values: ["database"]

// addons/db-local-pv/prod/storageclass.yaml
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: local-db-prod
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer

// charts/backend/Chart.yaml
apiVersion: v2
name: backend
description: Backend application chart (newsapp)
type: application
version: 0.1.0
appVersion: "1.0.0"

// charts/backend/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "backend.fullname" . }}
  labels:
    {{- include "backend.labels" . | nindent 4 }}
  annotations:
    argocd.argoproj.io/sync-wave: {{ .Values.app.syncWave | default "1" | quote }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "backend.name" . }}
      app.kubernetes.io/component: {{ include "backend.component" . }}
  template:
    metadata:
      labels:
        {{- include "backend.labels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.podSecurityContext }}
      securityContext:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
      {{- end }}
      containers:
        - name: {{ include "backend.name" . }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.service.port }}
              name: http
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            {{- range $k, $v := .Values.env.plain }}
            - name: {{ $k }}
              value: "{{ $v }}"
            {{- end }}
          {{- if or .Values.env.secretRef .Values.env.configRef }}
          envFrom:
            {{- if .Values.env.configRef }}
            - configMapRef: { name: {{ .Values.env.configRef }} }
            {{- end }}
            {{- if .Values.env.secretRef }}
            - secretRef: { name: {{ .Values.env.secretRef }} }
            {{- end }}
          {{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}

          {{- with .Values.probes }}
          {{- if .readiness.enabled }}
          readinessProbe:
            {{- if eq (.readiness.type | default "http") "http" }}
            httpGet:
              path: {{ .readiness.path | quote }}
              port: {{ $.Values.service.port }}
              scheme: {{ .readiness.scheme | default "HTTP" }}
            {{- else }}
            tcpSocket:
              port: {{ .readiness.port | default $.Values.service.port }}
            {{- end }}
            initialDelaySeconds: {{ .readiness.initialDelaySeconds | default 5 }}
            periodSeconds: {{ .readiness.periodSeconds | default 10 }}
            timeoutSeconds: {{ .readiness.timeoutSeconds | default 2 }}
            successThreshold: {{ .readiness.successThreshold | default 1 }}
            failureThreshold: {{ .readiness.failureThreshold | default 3 }}
          {{- end }}

          {{- if .liveness.enabled }}
          livenessProbe:
            {{- if eq (.liveness.type | default "http") "http" }}
            httpGet:
              path: {{ .liveness.path | quote }}
              port: {{ $.Values.service.port }}
              scheme: {{ .liveness.scheme | default "HTTP" }}
            {{- else }}
            tcpSocket:
              port: {{ .liveness.port | default $.Values.service.port }}
            {{- end }}
            initialDelaySeconds: {{ .liveness.initialDelaySeconds | default 30 }}
            periodSeconds: {{ .liveness.periodSeconds | default 10 }}
            timeoutSeconds: {{ .liveness.timeoutSeconds | default 2 }}
            successThreshold: {{ .liveness.successThreshold | default 1 }}
            failureThreshold: {{ .liveness.failureThreshold | default 6 }}
          {{- end }}

          {{- if and .startup .startup.enabled }}
          startupProbe:
            {{- if eq (.startup.type | default "http") "http" }}
            httpGet:
              path: {{ .startup.path | quote }}
              port: {{ $.Values.service.port }}
              scheme: {{ .startup.scheme | default "HTTP" }}
            {{- else }}
            tcpSocket:
              port: {{ .startup.port | default $.Values.service.port }}
            {{- end }}
            periodSeconds: {{ .startup.periodSeconds | default 5 }}
            failureThreshold: {{ .startup.failureThreshold | default 30 }}
          {{- end }}
          {{- end }}

// charts/backend/templates/hpa.yaml
{{- $hpa := .Values.hpa | default dict -}}
{{- if and ($hpa.enabled) }}
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ include "backend.fullname" . }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ include "backend.fullname" . }}
  minReplicas: {{ default 1 $hpa.minReplicas }}
  maxReplicas: {{ default 3 $hpa.maxReplicas }}
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: {{ default 80 $hpa.targetCPUUtilizationPercentage }}
{{- end }}

// charts/backend/templates/networkpolicies.yaml
{{- if .Values.networkPolicy.enabled }}
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: be-ingress-from-fe
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/component: backend
  policyTypes: ["Ingress"]
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/component: frontend
      ports:
        - protocol: TCP
          port: {{ .Values.service.port }}

{{- if .Values.networkPolicy.backendEgressWeb.enabled }}
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: be-egress-web
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/component: backend
  policyTypes: ["Egress"]
  egress:
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
            {{- if .Values.networkPolicy.backendEgressWeb.exceptCidrs }}
            except:
            {{- range $cidr := .Values.networkPolicy.backendEgressWeb.exceptCidrs }}
              - {{ $cidr | quote }}
            {{- end }}
            {{- end }}
      ports:
      {{- range $p := (.Values.networkPolicy.backendEgressWeb.ports | default (list 80 443)) }}
        - protocol: TCP
          port: {{ $p }}
      {{- end }}
{{- end }}
{{- end }}

// charts/backend/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: {{ include "backend.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "backend.name" . }}
  annotations:
    argocd.argoproj.io/sync-wave: "{{ .Values.app.syncWave | default "1" }}"
spec:
  type: {{ .Values.service.type }}
  selector:
    app.kubernetes.io/name: {{ include "backend.name" . }}
    app.kubernetes.io/component: {{ include "backend.component" . }}
  ports:
    - name: http
      port: {{ .Values.service.port }}
      targetPort: {{ .Values.service.port }}

// charts/backend/templates/_helpers.tpl
{{- define "backend.name" -}}
{{- if .Values.nameOverride }}{{- .Values.nameOverride | trunc 63 | trimSuffix "-" -}}
{{- else }}{{- .Chart.Name | trunc 63 | trimSuffix "-" -}}{{- end -}}
{{- end }}

{{- define "backend.fullname" -}}
{{- if .Values.fullnameOverride }}{{- .Values.fullnameOverride | trunc 63 | trimSuffix "-" -}}
{{- else -}}
{{- $name := include "backend.name" . -}}
{{- if contains $name .Release.Name }}{{ .Release.Name | trunc 63 | trimSuffix "-" }}
{{- else }}{{ printf "%s-%s" .Release.Name $name | trunc 63 | trimSuffix "-" }}{{- end -}}
{{- end -}}
{{- end }}

{{- define "backend.component" -}}
{{- if .Values.app.name }}{{ .Values.app.name | trunc 63 | trimSuffix "-" }}{{ else }}{{ .Chart.Name | trunc 63 | trimSuffix "-" }}{{ end -}}
{{- end }}

{{- define "backend.labels" -}}
app.kubernetes.io/name: {{ include "backend.name" . }}
app.kubernetes.io/instance: {{ .Release.Name }}
app.kubernetes.io/component: {{ include "backend.component" . }}
{{- end }}

// charts/backend/values.yaml
# backend defaults
app:
  name: backend
  syncWave: "1"

image:
  repository: ""
  tag: "latest"
  pullPolicy: IfNotPresent

replicaCount: 1

service:
  type: ClusterIP
  port: 8080

podSecurityContext: {}
containerSecurityContext: {}

resources:
  requests:
    cpu: 100m
    memory: 256Mi
  limits:
    cpu: 500m
    memory: 512Mi

nodeSelector: {}
tolerations: []
affinity: {}

imagePullSecrets: []

env:
  plain: {}
  secretRef: ""
  configRef: ""

hpa:
  enabled: false

probes:
  readiness:
    enabled: true
    type: http
    path: /healthz
    scheme: HTTP
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 2
    successThreshold: 1
    failureThreshold: 3

  liveness:
    enabled: true
    type: http
    path: /healthz
    scheme: HTTP
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 2
    successThreshold: 1
    failureThreshold: 6

  startup:
    enabled: false
    type: http
    path: /healthz
    scheme: HTTP
    periodSeconds: 5
    failureThreshold: 30

networkPolicy:
  enabled: true
  backendEgressWeb:
    enabled: true
    exceptCidrs: []
    ports: [80, 443]

// charts/frontend/Chart.yaml
apiVersion: v2
name: frontend
description: Frontend application chart (newsapp)
type: application
version: 0.1.0
appVersion: "1.0.0"

// charts/frontend/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "frontend.fullname" $ }}
  labels:
    {{- include "frontend.labels" $ | nindent 4 }}
  annotations:
    argocd.argoproj.io/sync-wave: {{ .Values.app.syncWave | default "2" | quote }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "frontend.name" $ }}
      app.kubernetes.io/component: {{ include "frontend.component" $ }}
  template:
    metadata:
      labels:
        {{- include "frontend.labels" $ | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.podSecurityContext }}
      securityContext:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
      {{- end }}
      containers:
        - name: {{ include "frontend.name" $ }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.service.port }}
              name: http
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            {{- range $k, $v := .Values.env.plain }}
            - name: {{ $k }}
              value: "{{ $v }}"
            {{- end }}
          {{- if or .Values.env.secretRef .Values.env.configRef }}
          envFrom:
            {{- if .Values.env.configRef }}
            - configMapRef: { name: {{ .Values.env.configRef }} }
            {{- end }}
            {{- if .Values.env.secretRef }}
            - secretRef: { name: {{ .Values.env.secretRef }} }
            {{- end }}
          {{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
          {{- with .Values.probes }}
          {{- if .readiness }}
          readinessProbe:
            {{- if eq (.readiness.type | default "tcp") "http" }}
            httpGet:
              path: {{ .readiness.path | default "/" | quote }}
              port: {{ $.Values.service.port }}
              scheme: {{ .readiness.scheme | default "HTTP" }}
            {{- else }}
            tcpSocket:
              port: {{ $.Values.service.port }}
            {{- end }}
            initialDelaySeconds: {{ .readiness.initialDelaySeconds | default 5 }}
            periodSeconds: {{ .readiness.periodSeconds | default 10 }}
            timeoutSeconds: {{ .readiness.timeoutSeconds | default 2 }}
            successThreshold: {{ .readiness.successThreshold | default 1 }}
            failureThreshold: {{ .readiness.failureThreshold | default 3 }}
          {{- end }}
          {{- if .liveness }}
          livenessProbe:
            {{- if eq (.liveness.type | default "tcp") "http" }}
            httpGet:
              path: {{ .liveness.path | default "/" | quote }}
              port: {{ $.Values.service.port }}
              scheme: {{ .liveness.scheme | default "HTTP" }}
            {{- else }}
            tcpSocket:
              port: {{ $.Values.service.port }}
            {{- end }}
            initialDelaySeconds: {{ .liveness.initialDelaySeconds | default 30 }}
            periodSeconds: {{ .liveness.periodSeconds | default 10 }}
            timeoutSeconds: {{ .liveness.timeoutSeconds | default 2 }}
            successThreshold: {{ .liveness.successThreshold | default 1 }}
            failureThreshold: {{ .liveness.failureThreshold | default 6 }}
          {{- end }}
          {{- if and .startup .startup.enabled }}
          startupProbe:
            {{- if eq (.startup.type | default "tcp") "http" }}
            httpGet:
              path: {{ .startup.path | default "/" | quote }}
              port: {{ $.Values.service.port }}
              scheme: {{ .startup.scheme | default "HTTP" }}
            {{- else }}
            tcpSocket:
              port: {{ $.Values.service.port }}
            {{- end }}
            periodSeconds: {{ .startup.periodSeconds | default 5 }}
            failureThreshold: {{ .startup.failureThreshold | default 30 }}
          {{- end }}
          {{- end }}

// charts/frontend/templates/hpa.yaml
{{- $hpa := .Values.hpa | default dict -}}
{{- if and ($hpa.enabled) }}
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ include "frontend.fullname" $ }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ include "frontend.fullname" $ }}
  minReplicas: {{ default 1 $hpa.minReplicas }}
  maxReplicas: {{ default 3 $hpa.maxReplicas }}
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: {{ default 80 $hpa.targetCPUUtilizationPercentage }}
{{- end }}

// charts/frontend/templates/ingress.yaml
{{- if .Values.ingress.enabled }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ include "frontend.fullname" $ }}
  annotations:
    {{- if .Values.ingress.annotations }}
{{ toYaml .Values.ingress.annotations | nindent 4 }}
    {{- end }}
    {{- if .Values.ingress.certManagerClusterIssuer }}
    cert-manager.io/cluster-issuer: {{ .Values.ingress.certManagerClusterIssuer | quote }}
    {{- end }}
spec:
  {{- with .Values.ingress.className }}
  ingressClassName: {{ . | quote }}
  {{- end }}
  rules:
    {{- range $host := .Values.ingress.hosts }}
    - host: {{ $host.host | quote }}
      http:
        paths:
          {{- range $p := $host.paths }}
          - path: {{ $p.path | quote }}
            pathType: {{ $p.pathType | default "Prefix" | quote }}
            backend:
              service:
                name: {{ include "frontend.fullname" $ }}
                port:
                  number: {{ $.Values.service.port }}
          {{- end }}
    {{- end }}
  {{- with .Values.ingress.tls }}
  tls:
{{ toYaml . | nindent 4 }}
  {{- end }}
{{- end }}

// charts/frontend/templates/networkpolicies.yaml
{{- if .Values.networkPolicy.enabled }}
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: fe-allow-from-ingress
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/component: frontend
  policyTypes: ["Ingress"]
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: ingress-nginx
      ports:
        - protocol: TCP
          port: {{ .Values.service.port }}

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-acme-http01-to-fe
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/component: frontend
  policyTypes: ["Ingress"]
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: ingress-nginx
      ports:
        - protocol: TCP
          port: 8089
{{- end }}

// charts/frontend/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: {{ include "frontend.fullname" $ }}
  labels:
    app.kubernetes.io/name: {{ include "frontend.name" $ }}
  annotations:
    argocd.argoproj.io/sync-wave: "{{ .Values.app.syncWave | default "2" }}"
spec:
  type: {{ .Values.service.type }}
  selector:
    app.kubernetes.io/name: {{ include "frontend.name" $ }}
    app.kubernetes.io/component: {{ include "frontend.component" $ }}
  ports:
    - name: http
      port: {{ .Values.service.port }}
      targetPort: {{ .Values.service.port }}
      {{- if and (eq .Values.service.type "NodePort") .Values.service.nodePort }}
      nodePort: {{ .Values.service.nodePort }}
      {{- end }}

// charts/frontend/templates/_helpers.tpl
{{- define "frontend.name" -}}
{{- if .Values.nameOverride }}{{- .Values.nameOverride | trunc 63 | trimSuffix "-" -}}
{{- else }}{{- .Chart.Name | trunc 63 | trimSuffix "-" -}}{{- end -}}
{{- end }}

{{- define "frontend.fullname" -}}
{{- if .Values.fullnameOverride }}{{- .Values.fullnameOverride | trunc 63 | trimSuffix "-" -}}
{{- else -}}
{{- $name := include "frontend.name" . -}}
{{- if contains $name .Release.Name }}{{ .Release.Name | trunc 63 | trimSuffix "-" }}
{{- else }}{{ printf "%s-%s" .Release.Name $name | trunc 63 | trimSuffix "-" }}{{- end -}}
{{- end -}}
{{- end }}

{{- define "frontend.component" -}}
{{- if .Values.app.name }}{{ .Values.app.name | trunc 63 | trimSuffix "-" }}{{ else }}{{ .Chart.Name | trunc 63 | trimSuffix "-" }}{{ end -}}
{{- end }}

{{- define "frontend.labels" -}}
app.kubernetes.io/name: {{ include "frontend.name" . }}
app.kubernetes.io/instance: {{ .Release.Name }}
app.kubernetes.io/component: {{ include "frontend.component" . }}
{{- end }}

// charts/frontend/values.yaml
# Default values for frontend chart
app:
  name: frontend
  syncWave: "2"

image:
  repository: elipavlov/newsapp-frontend
  tag: "latest"
  pullPolicy: IfNotPresent

replicaCount: 1

service:
  type: ClusterIP
  port: 8080
  nodePort: null
  hostPort: null

podSecurityContext: {}
containerSecurityContext: {}

resources:
  requests:
    cpu: 50m
    memory: 64Mi
  limits:
    cpu: 200m
    memory: 128Mi

nodeSelector: {}
tolerations: []
affinity: {}

imagePullSecrets: []

env:
  plain: {}
  secretRef: ""
  configRef: ""

hpa:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
  certManagerClusterIssuer: ""   # set per-env (dev->letsencrypt-staging, prod->letsencrypt-dns01-cloudflare)
  hosts: []
  tls: []

probes:
  readiness:
    type: tcp
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 2
    successThreshold: 1
    failureThreshold: 3
  liveness:
    type: tcp
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 2
    successThreshold: 1
    failureThreshold: 6
  startup:
    enabled: true
    type: tcp
    periodSeconds: 5
    failureThreshold: 30

networkPolicy:
  enabled: true

// charts/postgres/.helmignore
.git/
.github/
.vscode/
*.swp
*.bak
*.tmp

// charts/postgres/Chart.yaml
apiVersion: v2
name: postgres
description: Lightweight PostgreSQL StatefulSet (uses an existing Secret for creds)
type: application
version: 0.1.0
appVersion: "16"

// charts/postgres/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: {{ include "postgres.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "postgres.fullname" . }}
  annotations:
    argocd.argoproj.io/sync-wave: "0"
spec:
  # With a single replica, prevent voluntary disruptions
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "postgres.fullname" . }}

// charts/postgres/templates/service-client.yaml
apiVersion: v1
kind: Service
metadata:
  name: {{ include "postgres.fullname" . }}-client
  labels:
    app.kubernetes.io/name: {{ include "postgres.fullname" . }}
  annotations:
    argocd.argoproj.io/sync-wave: "0"
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: {{ include "postgres.fullname" . }}
  ports:
    - name: postgres
      port: {{ .Values.service.port }}
      targetPort: 5432

// charts/postgres/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: {{ include "postgres.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "postgres.fullname" . }}
  annotations:
    # Ensure DB comes up before anything that depends on it
    argocd.argoproj.io/sync-wave: "0"
spec:
  # Headless service for stable network IDs with StatefulSet
  clusterIP: None
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: {{ include "postgres.fullname" . }}
  ports:
    - name: postgres
      port: {{ .Values.service.port }}
      targetPort: 5432

// charts/postgres/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "0"
  name: {{ include "postgres.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "postgres.fullname" . }}
spec:
  serviceName: {{ include "postgres.fullname" . }}
  replicas: 1
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "postgres.fullname" . }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "postgres.fullname" . }}
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: role
                    operator: In
                    values:
                      - database

      terminationGracePeriodSeconds: 60

      {{- /* Allow per-environment tolerations to be injected from values (keeps ability to tolerate DB node taints) */ -}}
      {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
      {{- end }}

      {{- /* Pod-level securityContext injected from chart values (e.g. fsGroup, runAsUser) */ -}}
      {{- with .Values.securityContext }}
      securityContext:
{{ toYaml . | indent 8 }}
      {{- end }}

      {{- /* Optional init container to ensure the PV directory has correct owner/group (fixes permission denied on mkdir) */ -}}
      {{- if .Values.initFixPermissions.enabled }}
      initContainers:
        - name: fix-permissions
          image: {{ .Values.initFixPermissions.image | quote }}
          command:
            - sh
            - -c
            - "chown -R {{ .Values.initFixPermissions.ownerUid }}:{{ .Values.initFixPermissions.ownerGid }} {{ .Values.initFixPermissions.chownPath }} || true"
          securityContext:
            runAsUser: {{ .Values.initFixPermissions.runAsUser }}
          volumeMounts:
            - name: data
              mountPath: {{ .Values.initFixPermissions.chownPath }}
      {{- end }}

      containers:
        - name: postgres
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: 5432
              name: postgres
          env:
            - name: POSTGRES_DB
              value: {{ .Values.dbName | quote }}
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.existingSecret.name }}
                  key: {{ .Values.existingSecret.userKey }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.existingSecret.name }}
                  key: {{ .Values.existingSecret.passwordKey }}
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          readinessProbe:
            exec:
              command: ["sh","-c","pg_isready -U \"$POSTGRES_USER\" -d \"$POSTGRES_DB\" -h 127.0.0.1 -p 5432"]
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            failureThreshold: 6
          livenessProbe:
            exec:
              command: ["sh","-c","pg_isready -U \"$POSTGRES_USER\" -h 127.0.0.1 -p 5432"]
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          startupProbe:
            exec:
              command: ["sh","-c","pg_isready -U \"$POSTGRES_USER\" -h 127.0.0.1 -p 5432"]
            failureThreshold: 30
            periodSeconds: 5
          resources:
{{ toYaml .Values.resources | indent 12 }}
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: {{ .Values.storage.size | quote }}
        {{- if .Values.storage.storageClassName }}
        storageClassName: {{ .Values.storage.storageClassName | quote }}
        {{- end }}

// charts/postgres/templates/_helpers.tpl
{{- define "postgres.name" -}}
{{- if .Values.service.name -}}
{{ .Values.service.name | trunc 63 | trimSuffix "-" }}
{{- else -}}
{{ .Chart.Name | trunc 63 | trimSuffix "-" }}
{{- end -}}
{{- end }}

{{- define "postgres.fullname" -}}
{{ include "postgres.name" . }}
{{- end }}

// charts/postgres/values.yaml
image:
  repository: postgres
  tag: "16-alpine"
  pullPolicy: IfNotPresent

# Service and naming
service:
  name: postgresql        # override per env: postgresql-dev / postgresql-prod
  port: 5432
  type: ClusterIP

# Storage (uses cluster default StorageClass when empty)
storage:
  size: 10Gi
  storageClassName: ""    # e.g. "local-path" for K3s; leave empty to use default

# Container resources (override per env if needed)
resources:
  requests:
    cpu: 100m
    memory: 256Mi
  limits:
    memory: 512Mi

# Pod-level security context (helps with volume permissions)
securityContext:
  runAsUser: 999
  fsGroup: 999

# Init-container helper to fix ownership of mounted PV (enabled by default)
initFixPermissions:
  enabled: true
  image: busybox:1.36
  runAsUser: 0     # run init container as root so chown can change host dir perms
  ownerUid: 999
  ownerGid: 999
  chownPath: /var/lib/postgresql/data

# Use credentials from an existing Secret created by bootstrap:
existingSecret:
  name: postgres-credentials   # must exist in the namespace
  userKey: POSTGRES_USER
  passwordKey: POSTGRES_PASSWORD

# Name of the application database to create
dbName: appdb

nodeSelector: {}
tolerations: []

// clusters/addons/cert-manager-helm-app.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: cert-manager-helm
  namespace: argocd
  labels:
    app.kubernetes.io/name: cert-manager
  annotations:
    argocd.argoproj.io/sync-wave: "-3"
spec:
  project: default
  source:
    repoURL: https://charts.jetstack.io
    chart: cert-manager
    targetRevision: v1.14.4
    helm:
      releaseName: cert-manager
      values: |
        installCRDs: true
  destination:
    server: https://kubernetes.default.svc
    namespace: cert-manager
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - ApplyOutOfSyncOnly=true

// clusters/addons/cert-manager-local.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: cert-manager-local
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
spec:
  project: default
  source:
    repoURL: https://github.com/eli-pavlov/newsapp-manifests.git
    targetRevision: main
    path: addons/cert-manager
  destination:
    server: https://kubernetes.default.svc
    namespace: cert-manager
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - ApplyOutOfSyncOnly=true

// clusters/addons/ingress-nginx-app.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: ingress-nginx
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "-3"
spec:
  project: default
  source:
    repoURL: https://kubernetes.github.io/ingress-nginx
    chart: ingress-nginx
    targetRevision: 4.13.2
    helm:
      releaseName: ingress-nginx
      values: |
        controller:
          kind: DaemonSet
          ingressClassByName: true
          ingressClassResource:
            name: nginx
          service:
            type: NodePort
            nodePorts:
              http: 30080
              https: 30443
            externalTrafficPolicy: Local
          nodeSelector:
            role: application
  destination:
    server: https://kubernetes.default.svc
    namespace: ingress-nginx
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true

// clusters/dev/apps/backend-app.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: newsapp-backend-dev
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "0"
spec:
  project: newsapp-dev
  source:
    repoURL: https://github.com/eli-pavlov/newsapp-manifests.git
    targetRevision: main
    path: charts/backend
    helm:
      valueFiles:
        - ../../values/backend/dev.yaml
  destination:
    server: https://kubernetes.default.svc
    namespace: development
  syncPolicy:
    automated:
      prune: true
      selfHeal: true

// clusters/dev/apps/db-pv.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: newsapp-db-pv-dev
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
spec:
  project: newsapp-dev
  destination:
    server: https://kubernetes.default.svc
    namespace: development
  source:
    repoURL: https://github.com/eli-pavlov/newsapp-manifests.git
    targetRevision: main
    path: addons/db-local-pv/dev
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - ApplyOutOfSyncOnly=true

// clusters/dev/apps/frontend-app.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: newsapp-frontend-dev
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  project: newsapp-dev
  source:
    repoURL: https://github.com/eli-pavlov/newsapp-manifests.git
    targetRevision: main
    path: charts/frontend
    helm:
      valueFiles:
        - ../../values/frontend/dev.yaml
  destination:
    server: https://kubernetes.default.svc
    namespace: development
  syncPolicy:
    automated:
      prune: true
      selfHeal: true

// clusters/dev/apps/postgres-app.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: newsapp-postgres-dev
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  project: newsapp-dev
  source:
    repoURL: https://github.com/eli-pavlov/newsapp-manifests.git
    targetRevision: main
    path: charts/postgres
    helm:
      valueFiles:
        - ../../values/postgres/dev.yaml
  destination:
    server: https://kubernetes.default.svc
    namespace: development
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - ApplyOutOfSyncOnly=true

// clusters/dev/apps/project.yaml
apiVersion: argoproj.io/v1alpha1
kind: AppProject
metadata:
  name: newsapp-dev
  namespace: argocd
spec:
  description: "Development project for newsapp"
  sourceRepos:
    - https://github.com/eli-pavlov/newsapp-manifests.git
    - https://charts.jetstack.io   # optional, remove if you don't want cert-manager fetched by ArgoCD
  destinations:
    - namespace: development
      server: https://kubernetes.default.svc
    - namespace: cert-manager
      server: https://kubernetes.default.svc
    - namespace: argocd
      server: https://kubernetes.default.svc
  clusterResourceWhitelist:
    - group: '*'
      kind: '*'
  namespaceResourceWhitelist:
    - group: '*'
      kind: '*'

// clusters/dev/apps/stack.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: newsapp-dev-stack
  namespace: argocd
spec:
  project: newsapp-dev
  destination:
    server: https://kubernetes.default.svc
    namespace: development
  source:
    repoURL: https://github.com/eli-pavlov/newsapp-manifests.git
    targetRevision: main
    path: clusters/dev/apps
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - ApplyOutOfSyncOnly=true

// clusters/prod/apps/argocd-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: argocd-server-ingress
  namespace: argocd
  annotations:
    kubernetes.io/ingress.class: "nginx"
    # Terminate TLS at nginx. Proxy upstream with HTTPS to ArgoCD's internal TLS.
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    nginx.ingress.kubernetes.io/proxy-ssl-verify: "off"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    # Ensure ArgoCD sees original proto; helps avoid redirect loops if ArgoCD redirects
    nginx.ingress.kubernetes.io/configuration-snippet: |
      proxy_set_header X-Forwarded-Proto https;
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    # Tell cert-manager to provision the TLS secret referenced below
    cert-manager.io/cluster-issuer: "letsencrypt-dns01-cloudflare"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - argocd.weblightenment.com
      secretName: argocd-tls
  rules:
    - host: argocd.weblightenment.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: argocd-server
                # When proxying to ArgoCD's TLS port. If your argocd-server service exposes 443,
                # use 443; if it exposes another port, adjust to match your service.
                port:
                  number: 443

// clusters/prod/apps/backend-app.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: newsapp-backend-prod
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://github.com/eli-pavlov/newsapp-manifests.git
    targetRevision: main
    path: charts/backend
    helm:
      valueFiles:
        - ../../values/backend/prod.yaml
  destination:
    server: https://kubernetes.default.svc
    namespace: default
  syncPolicy:
    automated:
      prune: true
      selfHeal: true

// clusters/prod/apps/db-pv.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: newsapp-db-pv-prod
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
spec:
  project: newsapp-prod
  destination:
    server: https://kubernetes.default.svc
    namespace: default
  source:
    repoURL: https://github.com/eli-pavlov/newsapp-manifests.git
    targetRevision: main
    path: addons/db-local-pv/prod
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - ApplyOutOfSyncOnly=true

// clusters/prod/apps/frontend-app.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: newsapp-frontend-prod
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://github.com/eli-pavlov/newsapp-manifests.git
    targetRevision: main
    path: charts/frontend
    helm:
      valueFiles:
        - ../../values/frontend/prod.yaml
  destination:
    server: https://kubernetes.default.svc
    namespace: default
  syncPolicy:
    automated:
      prune: true
      selfHeal: true

// clusters/prod/apps/postgres-app.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: newsapp-postgres-prod
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  project: newsapp-prod
  source:
    repoURL: https://github.com/eli-pavlov/newsapp-manifests.git
    targetRevision: main
    path: charts/postgres
    helm:
      valueFiles:
        - ../../values/postgres/prod.yaml
  destination:
    server: https://kubernetes.default.svc
    namespace: default
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - ApplyOutOfSyncOnly=true

// clusters/prod/apps/project.yaml
apiVersion: argoproj.io/v1alpha1
kind: AppProject
metadata:
  name: newsapp-prod
  namespace: argocd
spec:
  description: "Environment project for newsapp"
  sourceRepos:
    - 'https://github.com/eli-pavlov/newsapp-manifests.git'
    - 'https://charts.jetstack.io'   #letting ArgoCD fetch cert-manager from helm
  destinations:
    - namespace: default
      server: https://kubernetes.default.svc
    - namespace: cert-manager
      server: https://kubernetes.default.svc
    - namespace: argocd
      server: https://kubernetes.default.svc
  clusterResourceWhitelist:
    - group: '*'
      kind: '*'
  namespaceResourceWhitelist:
    - group: '*'
      kind: '*'

// clusters/prod/apps/stack.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: newsapp-prod-stack
  namespace: argocd
spec:
  project: newsapp-prod
  destination:
    server: https://kubernetes.default.svc
    namespace: default
  source:
    repoURL: https://github.com/eli-pavlov/newsapp-manifests.git
    targetRevision: main
    path: clusters/prod/apps
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - ApplyOutOfSyncOnly=true

// docs/combined.txt
// addons/cert-manager/certificates.yaml
# Cert for ArgoCD (prod)
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: cert-argocd-weblightenment-com
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  secretName: argocd-tls
  dnsNames:
    - argocd.weblightenment.com
  issuerRef:
    name: letsencrypt-dns01-cloudflare
    kind: ClusterIssuer
---
# Cert for frontend (prod)
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: cert-newsapp-weblightenment-com
  namespace: default
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  secretName: newsapp-tls
  dnsNames:
    - newsapp.weblightenment.com
  issuerRef:
    name: letsencrypt-dns01-cloudflare
    kind: ClusterIssuer
---
# Cert for frontend (dev)
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: cert-newsapp-dev-weblightenment-com
  namespace: development
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  secretName: newsapp-dev-tls
  dnsNames:
    - newsapp-dev.weblightenment.com
  issuerRef:
    name: letsencrypt-staging
    kind: ClusterIssuer

// addons/cert-manager/issuers.yaml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-dns01-cloudflare
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: contact@weblightenment.com
    privateKeySecretRef:
      name: letsencrypt-dns01-account-key
    solvers:
      - dns01:
          cloudflare:
            apiTokenSecretRef:
              name: cloudflare-api-token-secret
              key: api-token
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-staging
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  acme:
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    email: contact@weblightenment.com
    privateKeySecretRef:
      name: letsencrypt-staging-account-key
    solvers:
      - dns01:
          cloudflare:
            apiTokenSecretRef:
              name: cloudflare-api-token-secret
              key: api-token

// addons/cert-manager/networkpolicy-certmanager-tls-egress.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-certmgr-tls-egress
  namespace: cert-manager
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
spec:
  podSelector: {}
  policyTypes:
    - Egress
  egress:
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
      ports:
        - protocol: TCP
          port: 443
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53

// addons/db-local-pv/dev/pv.yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: db-pv-dev
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
    weblightenment.io/owner-uid: "999"
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  storageClassName: local-db-dev
  persistentVolumeReclaimPolicy: Retain
  local:
    path: /mnt/oci/db/dev
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: role
              operator: In
              values: ["database"]

// addons/db-local-pv/dev/storageclass.yaml
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: local-db-dev
  annotations:
    # Create before PV and app resources
    argocd.argoproj.io/sync-wave: "-2"
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer

// addons/db-local-pv/prod/pv.yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: db-pv-prod
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
    weblightenment.io/owner-uid: "999"
spec:
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  storageClassName: local-db-prod
  persistentVolumeReclaimPolicy: Retain
  local:
    path: /mnt/oci/db/prod
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: role
              operator: In
              values: ["database"]

// addons/db-local-pv/prod/storageclass.yaml
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: local-db-prod
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer

// charts/backend/Chart.yaml
apiVersion: v2
name: backend
description: Backend application chart (newsapp)
type: application
version: 0.1.0
appVersion: "1.0.0"

// charts/backend/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "backend.fullname" . }}
  labels:
    {{- include "backend.labels" . | nindent 4 }}
  annotations:
    argocd.argoproj.io/sync-wave: {{ .Values.app.syncWave | default "1" | quote }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "backend.name" . }}
      app.kubernetes.io/component: {{ include "backend.component" . }}
  template:
    metadata:
      labels:
        {{- include "backend.labels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.podSecurityContext }}
      securityContext:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
      {{- end }}
      containers:
        - name: {{ include "backend.name" . }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.service.port }}
              name: http
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            {{- range $k, $v := .Values.env.plain }}
            - name: {{ $k }}
              value: "{{ $v }}"
            {{- end }}
          {{- if or .Values.env.secretRef .Values.env.configRef }}
          envFrom:
            {{- if .Values.env.configRef }}
            - configMapRef: { name: {{ .Values.env.configRef }} }
            {{- end }}
            {{- if .Values.env.secretRef }}
            - secretRef: { name: {{ .Values.env.secretRef }} }
            {{- end }}
          {{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}

          {{- with .Values.probes }}
          {{- if .readiness.enabled }}
          readinessProbe:
            {{- if eq (.readiness.type | default "http") "http" }}
            httpGet:
              path: {{ .readiness.path | quote }}
              port: {{ $.Values.service.port }}
              scheme: {{ .readiness.scheme | default "HTTP" }}
            {{- else }}
            tcpSocket:
              port: {{ .readiness.port | default $.Values.service.port }}
            {{- end }}
            initialDelaySeconds: {{ .readiness.initialDelaySeconds | default 5 }}
            periodSeconds: {{ .readiness.periodSeconds | default 10 }}
            timeoutSeconds: {{ .readiness.timeoutSeconds | default 2 }}
            successThreshold: {{ .readiness.successThreshold | default 1 }}
            failureThreshold: {{ .readiness.failureThreshold | default 3 }}
          {{- end }}

          {{- if .liveness.enabled }}
          livenessProbe:
            {{- if eq (.liveness.type | default "http") "http" }}
            httpGet:
              path: {{ .liveness.path | quote }}
              port: {{ $.Values.service.port }}
              scheme: {{ .liveness.scheme | default "HTTP" }}
            {{- else }}
            tcpSocket:
              port: {{ .liveness.port | default $.Values.service.port }}
            {{- end }}
            initialDelaySeconds: {{ .liveness.initialDelaySeconds | default 30 }}
            periodSeconds: {{ .liveness.periodSeconds | default 10 }}
            timeoutSeconds: {{ .liveness.timeoutSeconds | default 2 }}
            successThreshold: {{ .liveness.successThreshold | default 1 }}
            failureThreshold: {{ .liveness.failureThreshold | default 6 }}
          {{- end }}

          {{- if and .startup .startup.enabled }}
          startupProbe:
            {{- if eq (.startup.type | default "http") "http" }}
            httpGet:
              path: {{ .startup.path | quote }}
              port: {{ $.Values.service.port }}
              scheme: {{ .startup.scheme | default "HTTP" }}
            {{- else }}
            tcpSocket:
              port: {{ .startup.port | default $.Values.service.port }}
            {{- end }}
            periodSeconds: {{ .startup.periodSeconds | default 5 }}
            failureThreshold: {{ .startup.failureThreshold | default 30 }}
          {{- end }}
          {{- end }}

// charts/backend/templates/hpa.yaml
{{- $hpa := .Values.hpa | default dict -}}
{{- if and ($hpa.enabled) }}
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ include "backend.fullname" . }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ include "backend.fullname" . }}
  minReplicas: {{ default 1 $hpa.minReplicas }}
  maxReplicas: {{ default 3 $hpa.maxReplicas }}
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: {{ default 80 $hpa.targetCPUUtilizationPercentage }}
{{- end }}

// charts/backend/templates/networkpolicies.yaml
{{- if .Values.networkPolicy.enabled }}
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: be-ingress-from-fe
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/component: backend
  policyTypes: ["Ingress"]
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/component: frontend
      ports:
        - protocol: TCP
          port: {{ .Values.service.port }}

{{- if .Values.networkPolicy.backendEgressWeb.enabled }}
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: be-egress-web
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/component: backend
  policyTypes: ["Egress"]
  egress:
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
            {{- if .Values.networkPolicy.backendEgressWeb.exceptCidrs }}
            except:
            {{- range $cidr := .Values.networkPolicy.backendEgressWeb.exceptCidrs }}
              - {{ $cidr | quote }}
            {{- end }}
            {{- end }}
      ports:
      {{- range $p := (.Values.networkPolicy.backendEgressWeb.ports | default (list 80 443)) }}
        - protocol: TCP
          port: {{ $p }}
      {{- end }}
{{- end }}
{{- end }}

// charts/backend/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: {{ include "backend.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "backend.name" . }}
  annotations:
    argocd.argoproj.io/sync-wave: "{{ .Values.app.syncWave | default "1" }}"
spec:
  type: {{ .Values.service.type }}
  selector:
    app.kubernetes.io/name: {{ include "backend.name" . }}
    app.kubernetes.io/component: {{ include "backend.component" . }}
  ports:
    - name: http
      port: {{ .Values.service.port }}
      targetPort: {{ .Values.service.port }}

// charts/backend/templates/_helpers.tpl
{{- define "backend.name" -}}
{{- if .Values.nameOverride }}{{- .Values.nameOverride | trunc 63 | trimSuffix "-" -}}
{{- else }}{{- .Chart.Name | trunc 63 | trimSuffix "-" -}}{{- end -}}
{{- end }}

{{- define "backend.fullname" -}}
{{- if .Values.fullnameOverride }}{{- .Values.fullnameOverride | trunc 63 | trimSuffix "-" -}}
{{- else -}}
{{- $name := include "backend.name" . -}}
{{- if contains $name .Release.Name }}{{ .Release.Name | trunc 63 | trimSuffix "-" }}
{{- else }}{{ printf "%s-%s" .Release.Name $name | trunc 63 | trimSuffix "-" }}{{- end -}}
{{- end -}}
{{- end }}

{{- define "backend.component" -}}
{{- if .Values.app.name }}{{ .Values.app.name | trunc 63 | trimSuffix "-" }}{{ else }}{{ .Chart.Name | trunc 63 | trimSuffix "-" }}{{ end -}}
{{- end }}

{{- define "backend.labels" -}}
app.kubernetes.io/name: {{ include "backend.name" . }}
app.kubernetes.io/instance: {{ .Release.Name }}
app.kubernetes.io/component: {{ include "backend.component" . }}
{{- end }}

// charts/backend/values.yaml
# backend defaults
app:
  name: backend
  syncWave: "1"

image:
  repository: ""
  tag: "latest"
  pullPolicy: IfNotPresent

replicaCount: 1

service:
  type: ClusterIP
  port: 8080

podSecurityContext: {}
containerSecurityContext: {}

resources:
  requests:
    cpu: 100m
    memory: 256Mi
  limits:
    cpu: 500m
    memory: 512Mi

nodeSelector: {}
tolerations: []
affinity: {}

imagePullSecrets: []

env:
  plain: {}
  secretRef: ""
  configRef: ""

hpa:
  enabled: false

probes:
  readiness:
    enabled: true
    type: http
    path: /healthz
    scheme: HTTP
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 2
    successThreshold: 1
    failureThreshold: 3

  liveness:
    enabled: true
    type: http
    path: /healthz
    scheme: HTTP
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 2
    successThreshold: 1
    failureThreshold: 6

  startup:
    enabled: false
    type: http
    path: /healthz
    scheme: HTTP
    periodSeconds: 5
    failureThreshold: 30

networkPolicy:
  enabled: true
  backendEgressWeb:
    enabled: true
    exceptCidrs: []
    ports: [80, 443]

// charts/frontend/Chart.yaml
apiVersion: v2
name: frontend
description: Frontend application chart (newsapp)
type: application
version: 0.1.0
appVersion: "1.0.0"

// charts/frontend/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "frontend.fullname" $ }}
  labels:
    {{- include "frontend.labels" $ | nindent 4 }}
  annotations:
    argocd.argoproj.io/sync-wave: {{ .Values.app.syncWave | default "2" | quote }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "frontend.name" $ }}
      app.kubernetes.io/component: {{ include "frontend.component" $ }}
  template:
    metadata:
      labels:
        {{- include "frontend.labels" $ | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.podSecurityContext }}
      securityContext:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
      {{- end }}
      containers:
        - name: {{ include "frontend.name" $ }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.service.port }}
              name: http
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            {{- range $k, $v := .Values.env.plain }}
            - name: {{ $k }}
              value: "{{ $v }}"
            {{- end }}
          {{- if or .Values.env.secretRef .Values.env.configRef }}
          envFrom:
            {{- if .Values.env.configRef }}
            - configMapRef: { name: {{ .Values.env.configRef }} }
            {{- end }}
            {{- if .Values.env.secretRef }}
            - secretRef: { name: {{ .Values.env.secretRef }} }
            {{- end }}
          {{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
          {{- with .Values.probes }}
          {{- if .readiness }}
          readinessProbe:
            {{- if eq (.readiness.type | default "tcp") "http" }}
            httpGet:
              path: {{ .readiness.path | default "/" | quote }}
              port: {{ $.Values.service.port }}
              scheme: {{ .readiness.scheme | default "HTTP" }}
            {{- else }}
            tcpSocket:
              port: {{ $.Values.service.port }}
            {{- end }}
            initialDelaySeconds: {{ .readiness.initialDelaySeconds | default 5 }}
            periodSeconds: {{ .readiness.periodSeconds | default 10 }}
            timeoutSeconds: {{ .readiness.timeoutSeconds | default 2 }}
            successThreshold: {{ .readiness.successThreshold | default 1 }}
            failureThreshold: {{ .readiness.failureThreshold | default 3 }}
          {{- end }}
          {{- if .liveness }}
          livenessProbe:
            {{- if eq (.liveness.type | default "tcp") "http" }}
            httpGet:
              path: {{ .liveness.path | default "/" | quote }}
              port: {{ $.Values.service.port }}
              scheme: {{ .liveness.scheme | default "HTTP" }}
            {{- else }}
            tcpSocket:
              port: {{ $.Values.service.port }}
            {{- end }}
            initialDelaySeconds: {{ .liveness.initialDelaySeconds | default 30 }}
            periodSeconds: {{ .liveness.periodSeconds | default 10 }}
            timeoutSeconds: {{ .liveness.timeoutSeconds | default 2 }}
            successThreshold: {{ .liveness.successThreshold | default 1 }}
            failureThreshold: {{ .liveness.failureThreshold | default 6 }}
          {{- end }}
          {{- if and .startup .startup.enabled }}
          startupProbe:
            {{- if eq (.startup.type | default "tcp") "http" }}
            httpGet:
              path: {{ .startup.path | default "/" | quote }}
              port: {{ $.Values.service.port }}
              scheme: {{ .startup.scheme | default "HTTP" }}
            {{- else }}
            tcpSocket:
              port: {{ $.Values.service.port }}
            {{- end }}
            periodSeconds: {{ .startup.periodSeconds | default 5 }}
            failureThreshold: {{ .startup.failureThreshold | default 30 }}
          {{- end }}
          {{- end }}

// charts/frontend/templates/hpa.yaml
{{- $hpa := .Values.hpa | default dict -}}
{{- if and ($hpa.enabled) }}
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ include "frontend.fullname" $ }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ include "frontend.fullname" $ }}
  minReplicas: {{ default 1 $hpa.minReplicas }}
  maxReplicas: {{ default 3 $hpa.maxReplicas }}
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: {{ default 80 $hpa.targetCPUUtilizationPercentage }}
{{- end }}

// charts/frontend/templates/ingress.yaml
{{- if .Values.ingress.enabled }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ include "frontend.fullname" $ }}
  annotations:
    {{- if .Values.ingress.annotations }}
{{ toYaml .Values.ingress.annotations | nindent 4 }}
    {{- end }}
    {{- if .Values.ingress.certManagerClusterIssuer }}
    cert-manager.io/cluster-issuer: {{ .Values.ingress.certManagerClusterIssuer | quote }}
    {{- end }}
spec:
  {{- with .Values.ingress.className }}
  ingressClassName: {{ . | quote }}
  {{- end }}
  rules:
    {{- range $host := .Values.ingress.hosts }}
    - host: {{ $host.host | quote }}
      http:
        paths:
          {{- range $p := $host.paths }}
          - path: {{ $p.path | quote }}
            pathType: {{ $p.pathType | default "Prefix" | quote }}
            backend:
              service:
                name: {{ include "frontend.fullname" $ }}
                port:
                  number: {{ $.Values.service.port }}
          {{- end }}
    {{- end }}
  {{- with .Values.ingress.tls }}
  tls:
{{ toYaml . | nindent 4 }}
  {{- end }}
{{- end }}

// charts/frontend/templates/networkpolicies.yaml
{{- if .Values.networkPolicy.enabled }}
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: fe-allow-from-ingress
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/component: frontend
  policyTypes: ["Ingress"]
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: ingress-nginx
      ports:
        - protocol: TCP
          port: {{ .Values.service.port }}

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-acme-http01-to-fe
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/component: frontend
  policyTypes: ["Ingress"]
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: ingress-nginx
      ports:
        - protocol: TCP
          port: 8089
{{- end }}

// charts/frontend/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: {{ include "frontend.fullname" $ }}
  labels:
    app.kubernetes.io/name: {{ include "frontend.name" $ }}
  annotations:
    argocd.argoproj.io/sync-wave: "{{ .Values.app.syncWave | default "2" }}"
spec:
  type: {{ .Values.service.type }}
  selector:
    app.kubernetes.io/name: {{ include "frontend.name" $ }}
    app.kubernetes.io/component: {{ include "frontend.component" $ }}
  ports:
    - name: http
      port: {{ .Values.service.port }}
      targetPort: {{ .Values.service.port }}
      {{- if and (eq .Values.service.type "NodePort") .Values.service.nodePort }}
      nodePort: {{ .Values.service.nodePort }}
      {{- end }}

// charts/frontend/templates/_helpers.tpl
{{- define "frontend.name" -}}
{{- if .Values.nameOverride }}{{- .Values.nameOverride | trunc 63 | trimSuffix "-" -}}
{{- else }}{{- .Chart.Name | trunc 63 | trimSuffix "-" -}}{{- end -}}
{{- end }}

{{- define "frontend.fullname" -}}
{{- if .Values.fullnameOverride }}{{- .Values.fullnameOverride | trunc 63 | trimSuffix "-" -}}
{{- else -}}
{{- $name := include "frontend.name" . -}}
{{- if contains $name .Release.Name }}{{ .Release.Name | trunc 63 | trimSuffix "-" }}
{{- else }}{{ printf "%s-%s" .Release.Name $name | trunc 63 | trimSuffix "-" }}{{- end -}}
{{- end -}}
{{- end }}

{{- define "frontend.component" -}}
{{- if .Values.app.name }}{{ .Values.app.name | trunc 63 | trimSuffix "-" }}{{ else }}{{ .Chart.Name | trunc 63 | trimSuffix "-" }}{{ end -}}
{{- end }}

{{- define "frontend.labels" -}}
app.kubernetes.io/name: {{ include "frontend.name" . }}
app.kubernetes.io/instance: {{ .Release.Name }}
app.kubernetes.io/component: {{ include "frontend.component" . }}
{{- end }}

// charts/frontend/values.yaml
# Default values for frontend chart
app:
  name: frontend
  syncWave: "2"

image:
  repository: elipavlov/newsapp-frontend
  tag: "latest"
  pullPolicy: IfNotPresent

replicaCount: 1

service:
  type: ClusterIP
  port: 8080
  nodePort: null
  hostPort: null

podSecurityContext: {}
containerSecurityContext: {}

resources:
  requests:
    cpu: 50m
    memory: 64Mi
  limits:
    cpu: 200m
    memory: 128Mi

nodeSelector: {}
tolerations: []
affinity: {}

imagePullSecrets: []

env:
  plain: {}
  secretRef: ""
  configRef: ""

hpa:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
  certManagerClusterIssuer: ""   # set per-env (dev->letsencrypt-staging, prod->letsencrypt-dns01-cloudflare)
  hosts: []
  tls: []

probes:
  readiness:
    type: tcp
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 2
    successThreshold: 1
    failureThreshold: 3
  liveness:
    type: tcp
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 2
    successThreshold: 1
    failureThreshold: 6
  startup:
    enabled: true
    type: tcp
    periodSeconds: 5
    failureThreshold: 30

networkPolicy:
  enabled: true

// charts/postgres/.helmignore
.git/
.github/
.vscode/
*.swp
*.bak
*.tmp

// charts/postgres/Chart.yaml
apiVersion: v2
name: postgres
description: Lightweight PostgreSQL StatefulSet (uses an existing Secret for creds)
type: application
version: 0.1.0
appVersion: "16"

// charts/postgres/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: {{ include "postgres.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "postgres.fullname" . }}
  annotations:
    argocd.argoproj.io/sync-wave: "0"
spec:
  # With a single replica, prevent voluntary disruptions
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "postgres.fullname" . }}

// charts/postgres/templates/service-client.yaml
apiVersion: v1
kind: Service
metadata:
  name: {{ include "postgres.fullname" . }}-client
  labels:
    app.kubernetes.io/name: {{ include "postgres.fullname" . }}
  annotations:
    argocd.argoproj.io/sync-wave: "0"
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: {{ include "postgres.fullname" . }}
  ports:
    - name: postgres
      port: {{ .Values.service.port }}
      targetPort: 5432

// charts/postgres/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: {{ include "postgres.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "postgres.fullname" . }}
  annotations:
    # Ensure DB comes up before anything that depends on it
    argocd.argoproj.io/sync-wave: "0"
spec:
  # Headless service for stable network IDs with StatefulSet
  clusterIP: None
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: {{ include "postgres.fullname" . }}
  ports:
    - name: postgres
      port: {{ .Values.service.port }}
      targetPort: 5432

// charts/postgres/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "0"
  name: {{ include "postgres.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "postgres.fullname" . }}
spec:
  serviceName: {{ include "postgres.fullname" . }}
  replicas: 1
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "postgres.fullname" . }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "postgres.fullname" . }}
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: role
                    operator: In
                    values:
                      - database

      terminationGracePeriodSeconds: 60

      {{- /* Allow per-environment tolerations to be injected from values (keeps ability to tolerate DB node taints) */ -}}
      {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
      {{- end }}

      {{- /* Pod-level securityContext injected from chart values (e.g. fsGroup, runAsUser) */ -}}
      {{- with .Values.securityContext }}
      securityContext:
{{ toYaml . | indent 8 }}
      {{- end }}

      {{- /* Optional init container to ensure the PV directory has correct owner/group (fixes permission denied on mkdir) */ -}}
      {{- if .Values.initFixPermissions.enabled }}
      initContainers:
        - name: fix-permissions
          image: {{ .Values.initFixPermissions.image | quote }}
          command:
            - sh
            - -c
            - "chown -R {{ .Values.initFixPermissions.ownerUid }}:{{ .Values.initFixPermissions.ownerGid }} {{ .Values.initFixPermissions.chownPath }} || true"
          securityContext:
            runAsUser: {{ .Values.initFixPermissions.runAsUser }}
          volumeMounts:
            - name: data
              mountPath: {{ .Values.initFixPermissions.chownPath }}
      {{- end }}

      containers:
        - name: postgres
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: 5432
              name: postgres
          env:
            - name: POSTGRES_DB
              value: {{ .Values.dbName | quote }}
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.existingSecret.name }}
                  key: {{ .Values.existingSecret.userKey }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.existingSecret.name }}
                  key: {{ .Values.existingSecret.passwordKey }}
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          readinessProbe:
            exec:
              command: ["sh","-c","pg_isready -U \"$POSTGRES_USER\" -d \"$POSTGRES_DB\" -h 127.0.0.1 -p 5432"]
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            failureThreshold: 6
          livenessProbe:
            exec:
              command: ["sh","-c","pg_isready -U \"$POSTGRES_USER\" -h 127.0.0.1 -p 5432"]
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          startupProbe:
            exec:
              command: ["sh","-c","pg_isready -U \"$POSTGRES_USER\" -h 127.0.0.1 -p 5432"]
            failureThreshold: 30
            periodSeconds: 5
          resources:
{{ toYaml .Values.resources | indent 12 }}
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: {{ .Values.storage.size | quote }}
        {{- if .Values.storage.storageClassName }}
        storageClassName: {{ .Values.storage.storageClassName | quote }}
        {{- end }}

// charts/postgres/templates/_helpers.tpl
{{- define "postgres.name" -}}
{{- if .Values.service.name -}}
{{ .Values.service.name | trunc 63 | trimSuffix "-" }}
{{- else -}}
{{ .Chart.Name | trunc 63 | trimSuffix "-" }}
{{- end -}}
{{- end }}

{{- define "postgres.fullname" -}}
{{ include "postgres.name" . }}
{{- end }}

// charts/postgres/values.yaml
image:
  repository: postgres
  tag: "16-alpine"
  pullPolicy: IfNotPresent

# Service and naming
service:
  name: postgresql        # override per env: postgresql-dev / postgresql-prod
  port: 5432
  type: ClusterIP

# Storage (uses cluster default StorageClass when empty)
storage:
  size: 10Gi
  storageClassName: ""    # e.g. "local-path" for K3s; leave empty to use default

# Container resources (override per env if needed)
resources:
  requests:
    cpu: 100m
    memory: 256Mi
  limits:
    memory: 512Mi

# Pod-level security context (helps with volume permissions)
securityContext:
  runAsUser: 999
  fsGroup: 999

# Init-container helper to fix ownership of mounted PV (enabled by default)
initFixPermissions:
  enabled: true
  image: busybox:1.36
  runAsUser: 0     # run init container as root so chown can change host dir perms
  ownerUid: 999
  ownerGid: 999
  chownPath: /var/lib/postgresql/data

# Use credentials from an existing Secret created by bootstrap:
existingSecret:
  name: postgres-credentials   # must exist in the namespace
  userKey: POSTGRES_USER
  passwordKey: POSTGRES_PASSWORD

# Name of the application database to create
dbName: appdb

nodeSelector: {}
tolerations: []

// clusters/addons/cert-manager-helm-app.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: cert-manager-helm
  namespace: argocd
  labels:
    app.kubernetes.io/name: cert-manager
  annotations:
    argocd.argoproj.io/sync-wave: "-3"
spec:
  project: default
  source:
    repoURL: https://charts.jetstack.io
    chart: cert-manager
    targetRevision: v1.14.4
    helm:
      releaseName: cert-manager
      values: |
        installCRDs: true
  destination:
    server: https://kubernetes.default.svc
    namespace: cert-manager
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - ApplyOutOfSyncOnly=true

// clusters/addons/cert-manager-local.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: cert-manager-local
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
spec:
  project: default
  source:
    repoURL: https://github.com/eli-pavlov/newsapp-manifests.git
    targetRevision: main
    path: addons/cert-manager
  destination:
    server: https://kubernetes.default.svc
    namespace: cert-manager
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - ApplyOutOfSyncOnly=true

// clusters/addons/ingress-nginx-app.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: ingress-nginx
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "-3"
spec:
  project: default
  source:
    repoURL: https://kubernetes.github.io/ingress-nginx
    chart: ingress-nginx
    targetRevision: 4.13.2
    helm:
      releaseName: ingress-nginx
      values: |
        controller:
          kind: DaemonSet
          ingressClassByName: true
          ingressClassResource:
            name: nginx
          service:
            type: NodePort
            nodePorts:
              http: 30080
              https: 30443
            externalTrafficPolicy: Local
          nodeSelector:
            role: application
  destination:
    server: https://kubernetes.default.svc
    namespace: ingress-nginx
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true

// clusters/dev/apps/backend-app.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: newsapp-backend-dev
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "0"
spec:
  project: newsapp-dev
  source:
    repoURL: https://github.com/eli-pavlov/newsapp-manifests.git
    targetRevision: main
    path: charts/backend
    helm:
      valueFiles:
        - ../../values/backend/dev.yaml
  destination:
    server: https://kubernetes.default.svc
    namespace: development
  syncPolicy:
    automated:
      prune: true
      selfHeal: true

// clusters/dev/apps/db-pv.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: newsapp-db-pv-dev
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
spec:
  project: newsapp-dev
  destination:
    server: https://kubernetes.default.svc
    namespace: development
  source:
    repoURL: https://github.com/eli-pavlov/newsapp-manifests.git
    targetRevision: main
    path: addons/db-local-pv/dev
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - ApplyOutOfSyncOnly=true

// clusters/dev/apps/frontend-app.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: newsapp-frontend-dev
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  project: newsapp-dev
  source:
    repoURL: https://github.com/eli-pavlov/newsapp-manifests.git
    targetRevision: main
    path: charts/frontend
    helm:
      valueFiles:
        - ../../values/frontend/dev.yaml
  destination:
    server: https://kubernetes.default.svc
    namespace: development
  syncPolicy:
    automated:
      prune: true
      selfHeal: true

// clusters/dev/apps/postgres-app.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: newsapp-postgres-dev
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  project: newsapp-dev
  source:
    repoURL: https://github.com/eli-pavlov/newsapp-manifests.git
    targetRevision: main
    path: charts/postgres
    helm:
      valueFiles:
        - ../../values/postgres/dev.yaml
  destination:
    server: https://kubernetes.default.svc
    namespace: development
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - ApplyOutOfSyncOnly=true

// clusters/dev/apps/project.yaml
apiVersion: argoproj.io/v1alpha1
kind: AppProject
metadata:
  name: newsapp-dev
  namespace: argocd
spec:
  description: "Development project for newsapp"
  sourceRepos:
    - https://github.com/eli-pavlov/newsapp-manifests.git
    - https://charts.jetstack.io   # optional, remove if you don't want cert-manager fetched by ArgoCD
  destinations:
    - namespace: development
      server: https://kubernetes.default.svc
    - namespace: cert-manager
      server: https://kubernetes.default.svc
    - namespace: argocd
      server: https://kubernetes.default.svc
  clusterResourceWhitelist:
    - group: '*'
      kind: '*'
  namespaceResourceWhitelist:
    - group: '*'
      kind: '*'

// clusters/dev/apps/stack.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: newsapp-dev-stack
  namespace: argocd
spec:
  project: newsapp-dev
  destination:
    server: https://kubernetes.default.svc
    namespace: development
  source:
    repoURL: https://github.com/eli-pavlov/newsapp-manifests.git
    targetRevision: main
    path: clusters/dev/apps
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - ApplyOutOfSyncOnly=true

// clusters/prod/apps/argocd-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: argocd-server-ingress
  namespace: argocd
  annotations:
    kubernetes.io/ingress.class: "nginx"
    # Terminate TLS at nginx. Proxy upstream with HTTPS to ArgoCD's internal TLS.
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    nginx.ingress.kubernetes.io/proxy-ssl-verify: "off"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    # Ensure ArgoCD sees original proto; helps avoid redirect loops if ArgoCD redirects
    nginx.ingress.kubernetes.io/configuration-snippet: |
      proxy_set_header X-Forwarded-Proto https;
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    # Tell cert-manager to provision the TLS secret referenced below
    cert-manager.io/cluster-issuer: "letsencrypt-dns01-cloudflare"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - argocd.weblightenment.com
      secretName: argocd-tls
  rules:
    - host: argocd.weblightenment.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: argocd-server
                # When proxying to ArgoCD's TLS port. If your argocd-server service exposes 443,
                # use 443; if it exposes another port, adjust to match your service.
                port:
                  number: 443

// clusters/prod/apps/backend-app.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: newsapp-backend-prod
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://github.com/eli-pavlov/newsapp-manifests.git
    targetRevision: main
    path: charts/backend
    helm:
      valueFiles:
        - ../../values/backend/prod.yaml
  destination:
    server: https://kubernetes.default.svc
    namespace: default
  syncPolicy:
    automated:
      prune: true
      selfHeal: true

// clusters/prod/apps/db-pv.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: newsapp-db-pv-prod
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
spec:
  project: newsapp-prod
  destination:
    server: https://kubernetes.default.svc
    namespace: default
  source:
    repoURL: https://github.com/eli-pavlov/newsapp-manifests.git
    targetRevision: main
    path: addons/db-local-pv/prod
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - ApplyOutOfSyncOnly=true

// clusters/prod/apps/frontend-app.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: newsapp-frontend-prod
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://github.com/eli-pavlov/newsapp-manifests.git
    targetRevision: main
    path: charts/frontend
    helm:
      valueFiles:
        - ../../values/frontend/prod.yaml
  destination:
    server: https://kubernetes.default.svc
    namespace: default
  syncPolicy:
    automated:
      prune: true
      selfHeal: true

// clusters/prod/apps/postgres-app.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: newsapp-postgres-prod
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  project: newsapp-prod
  source:
    repoURL: https://github.com/eli-pavlov/newsapp-manifests.git
    targetRevision: main
    path: charts/postgres
    helm:
      valueFiles:
        - ../../values/postgres/prod.yaml
  destination:
    server: https://kubernetes.default.svc
    namespace: default
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - ApplyOutOfSyncOnly=true

// clusters/prod/apps/project.yaml
apiVersion: argoproj.io/v1alpha1
kind: AppProject
metadata:
  name: newsapp-prod
  namespace: argocd
spec:
  description: "Environment project for newsapp"
  sourceRepos:
    - 'https://github.com/eli-pavlov/newsapp-manifests.git'
    - 'https://charts.jetstack.io'   #letting ArgoCD fetch cert-manager from helm
  destinations:
    - namespace: default
      server: https://kubernetes.default.svc
    - namespace: cert-manager
      server: https://kubernetes.default.svc
    - namespace: argocd
      server: https://kubernetes.default.svc
  clusterResourceWhitelist:
    - group: '*'
      kind: '*'
  namespaceResourceWhitelist:
    - group: '*'
      kind: '*'

// clusters/prod/apps/stack.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: newsapp-prod-stack
  namespace: argocd
spec:
  project: newsapp-prod
  destination:
    server: https://kubernetes.default.svc
    namespace: default
  source:
    repoURL: https://github.com/eli-pavlov/newsapp-manifests.git
    targetRevision: main
    path: clusters/prod/apps
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - ApplyOutOfSyncOnly=true

// needed_envs
VITE_SERVER_URL= {{VITE_SERVER_URL}}
VITE_NEWS_INTERVAL_IN_MIN= {{VITE_NEWS_INTERVAL_IN_MIN}}
# MONGO | MONGOOSE | POSTGRES | MYSQL
DB_ENGINE_TYPE={{DB_ENGINE_TYPE}}
# connection string : [protocol]://[username]:[password]@[host]/[database name]
DB_URI={{DB_URI}}

// values/backend/dev.yaml
app:
  name: backend
  syncWave: "1"
fullnameOverride: backend
replicaCount: 2

image:
  repository: elipavlov/newsapp-backend
  tag: latest-66766bc     # <- updated to an image that exists on Docker Hub
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 8080

nodeSelector:
  role: application

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/component
                operator: In
                values: ["backend"]
          topologyKey: kubernetes.io/hostname

resources:
  requests:
    cpu: 100m
    memory: 256Mi
  limits:
    cpu: 500m
    memory: 512Mi

env:
  plain:
    DB_ENGINE_TYPE: "POSTGRES"
  secretRef: backend-db-connection

hpa:
  enabled: false

db:
  enabled: true
  service:
    name: postgresql-dev
    port: 5432
    type: ClusterIP
  dbName: newsdb_dev
  nodeSelector: { role: database }
  tolerations:
    - key: "role"
      operator: "Equal"
      value: "database"
      effect: "NoSchedule"
  existingSecret:
    name: postgres-credentials
    userKey: POSTGRES_USER
    passwordKey: POSTGRES_PASSWORD
  storage:
    size: 10Gi
    storageClassName: "local-db-dev"

networkPolicy:
  backendEgressWeb:
    enabled: true

// values/backend/prod.yaml
# values/backend/prod.yaml
app:
  name: backend
  syncWave: "1"
fullnameOverride: backend
replicaCount: 2

image:
  repository: elipavlov/newsapp-backend
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 8080

nodeSelector:
  role: application

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/component
                operator: In
                values: ["backend"]
          topologyKey: kubernetes.io/hostname

resources:
  requests:
    cpu: 100m
    memory: 256Mi
  limits:
    cpu: 500m
    memory: 512Mi

env:
  plain:
    DB_ENGINE_TYPE: "POSTGRES"
  secretRef: backend-db-connection

hpa:
  enabled: false

db:
  enabled: true
  service:
    name: postgresql-prod
    port: 5432
    type: ClusterIP
  dbName: newsdb_prod
  nodeSelector: { role: database }
  tolerations:
    - key: "role"
      operator: "Equal"
      value: "database"
      effect: "NoSchedule"
  existingSecret:
    name: postgres-credentials
    userKey: POSTGRES_USER
    passwordKey: POSTGRES_PASSWORD
  storage:
    size: 20Gi
    storageClassName: "local-db-prod"

networkPolicy:
  backendEgressWeb:
    enabled: true

// values/frontend/dev.yaml
app:
  name: frontend
  syncWave: "2"

replicaCount: 2

image:
  repository: elipavlov/newsapp-frontend
  tag: latest-ec40111
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 8080

nodeSelector:
  role: application

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/component
                operator: In
                values: ["frontend"]
          topologyKey: kubernetes.io/hostname

resources:
  requests:
    cpu: 50m
    memory: 64Mi
  limits:
    cpu: 200m
    memory: 128Mi

env:
  plain:
    VITE_SERVER_URL: "/api"
    VITE_NEWS_INTERVAL_IN_MIN: "5"
    BACKEND_SERVICE_HOST: "backend.development.svc.cluster.local"
    BACKEND_SERVICE_PORT: "8080"

ingress:
  enabled: true
  className: nginx
  certManagerClusterIssuer: letsencrypt-staging
  hosts:
    - host: newsapp-dev.weblightenment.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - hosts: ["newsapp-dev.weblightenment.com"]
      secretName: newsapp-dev-tls
hpa:
  enabled: false

// values/frontend/prod.yaml
# values/frontend/prod.yaml (top-level keys expected by charts/frontend)
app:
  name: frontend
  syncWave: "2"
replicaCount: 2
image:
  repository: elipavlov/newsapp-frontend
  tag: latest-ec40111
  pullPolicy: IfNotPresent
service:
  type: ClusterIP
  port: 8080
nodeSelector:
  role: application
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/component
                operator: In
                values: ["frontend"]
          topologyKey: kubernetes.io/hostname
resources:
  requests:
    cpu: 50m
    memory: 64Mi
  limits:
    cpu: 200m
    memory: 128Mi
env:
  plain:
    VITE_SERVER_URL: "/api"
    VITE_NEWS_INTERVAL_IN_MIN: "5"
    BACKEND_SERVICE_HOST: "backend.default.svc.cluster.local"
    BACKEND_SERVICE_PORT: "8080"
ingress:
  enabled: true
  className: nginx
  certManagerClusterIssuer: letsencrypt-dns01-cloudflare
  hosts:
    - host: newsapp.weblightenment.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - hosts: ["newsapp.weblightenment.com"]
      secretName: newsapp-tls
hpa:
  enabled: false
frontend:
  image:
    repository: elipavlov/newsapp-backend
    tag: latest-66766bc
  env:
    plain:
      VITE_SERVER_URL: /api
      VITE_NEWS_INTERVAL_IN_MIN: "5"
      BACKEND_SERVICE_HOST: ""
      BACKEND_SERVICE_PORT: ""

// values/postgres/dev.yaml
# values/postgres/dev.yaml
service:
  name: postgresql-dev
  port: 5432
  type: ClusterIP

storage:
  size: 10Gi
  storageClassName: "local-db-dev"

dbName: newsdb_dev

existingSecret:
  name: postgres-credentials
  userKey: POSTGRES_USER
  passwordKey: POSTGRES_PASSWORD

nodeSelector:
  role: database

tolerations:
  - key: "role"
    operator: "Equal"
    value: "database"
    effect: "NoSchedule"

resources:
  requests:
    cpu: 100m
    memory: 256Mi
  limits:
    memory: 512Mi

// values/postgres/prod.yaml
# values/postgres/prod.yaml
service:
  name: postgresql-prod
  port: 5432
  type: ClusterIP

storage:
  size: 20Gi
  storageClassName: "local-db-prod"

dbName: newsdb_prod

existingSecret:
  name: postgres-credentials
  userKey: POSTGRES_USER
  passwordKey: POSTGRES_PASSWORD

nodeSelector:
  role: database

tolerations:
  - key: "role"
    operator: "Equal"
    value: "database"
    effect: "NoSchedule"

resources:
  requests:
    cpu: 200m
    memory: 512Mi
  limits:
    memory: 1Gi

// docs/needed_envs
VITE_SERVER_URL= {{VITE_SERVER_URL}}
VITE_NEWS_INTERVAL_IN_MIN= {{VITE_NEWS_INTERVAL_IN_MIN}}
# MONGO | MONGOOSE | POSTGRES | MYSQL
DB_ENGINE_TYPE={{DB_ENGINE_TYPE}}
# connection string : [protocol]://[username]:[password]@[host]/[database name]
DB_URI={{DB_URI}}

// values/backend/dev.yaml
app:
  name: backend
  syncWave: "1"
fullnameOverride: backend
replicaCount: 2

image:
  repository: elipavlov/newsapp-backend
  tag: latest-66766bc     # <- updated to an image that exists on Docker Hub
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 8080

nodeSelector:
  role: application

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/component
                operator: In
                values: ["backend"]
          topologyKey: kubernetes.io/hostname

resources:
  requests:
    cpu: 100m
    memory: 256Mi
  limits:
    cpu: 500m
    memory: 512Mi

env:
  plain:
    DB_ENGINE_TYPE: "POSTGRES"
  secretRef: backend-db-connection

hpa:
  enabled: false

db:
  enabled: true
  service:
    name: postgresql-dev
    port: 5432
    type: ClusterIP
  dbName: newsdb_dev
  nodeSelector: { role: database }
  tolerations:
    - key: "role"
      operator: "Equal"
      value: "database"
      effect: "NoSchedule"
  existingSecret:
    name: postgres-credentials
    userKey: POSTGRES_USER
    passwordKey: POSTGRES_PASSWORD
  storage:
    size: 10Gi
    storageClassName: "local-db-dev"

networkPolicy:
  backendEgressWeb:
    enabled: true

// values/backend/prod.yaml
# values/backend/prod.yaml
app:
  name: backend
  syncWave: "1"
fullnameOverride: backend
replicaCount: 2

image:
  repository: elipavlov/newsapp-backend
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 8080

nodeSelector:
  role: application

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/component
                operator: In
                values: ["backend"]
          topologyKey: kubernetes.io/hostname

resources:
  requests:
    cpu: 100m
    memory: 256Mi
  limits:
    cpu: 500m
    memory: 512Mi

env:
  plain:
    DB_ENGINE_TYPE: "POSTGRES"
  secretRef: backend-db-connection

hpa:
  enabled: false

db:
  enabled: true
  service:
    name: postgresql-prod
    port: 5432
    type: ClusterIP
  dbName: newsdb_prod
  nodeSelector: { role: database }
  tolerations:
    - key: "role"
      operator: "Equal"
      value: "database"
      effect: "NoSchedule"
  existingSecret:
    name: postgres-credentials
    userKey: POSTGRES_USER
    passwordKey: POSTGRES_PASSWORD
  storage:
    size: 20Gi
    storageClassName: "local-db-prod"

networkPolicy:
  backendEgressWeb:
    enabled: true

// values/frontend/dev.yaml
app:
  name: frontend
  syncWave: "2"

replicaCount: 2

image:
  repository: elipavlov/newsapp-frontend
  tag: latest-ec40111
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 8080

nodeSelector:
  role: application

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/component
                operator: In
                values: ["frontend"]
          topologyKey: kubernetes.io/hostname

resources:
  requests:
    cpu: 50m
    memory: 64Mi
  limits:
    cpu: 200m
    memory: 128Mi

env:
  plain:
    VITE_SERVER_URL: "/api"
    VITE_NEWS_INTERVAL_IN_MIN: "5"
    BACKEND_SERVICE_HOST: "backend.development.svc.cluster.local"
    BACKEND_SERVICE_PORT: "8080"

ingress:
  enabled: true
  className: nginx
  certManagerClusterIssuer: letsencrypt-staging
  hosts:
    - host: newsapp-dev.weblightenment.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - hosts: ["newsapp-dev.weblightenment.com"]
      secretName: newsapp-dev-tls
hpa:
  enabled: false

// values/frontend/prod.yaml
# values/frontend/prod.yaml (top-level keys expected by charts/frontend)
app:
  name: frontend
  syncWave: "2"
replicaCount: 2
image:
  repository: elipavlov/newsapp-frontend
  tag: latest-ec40111
  pullPolicy: IfNotPresent
service:
  type: ClusterIP
  port: 8080
nodeSelector:
  role: application
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/component
                operator: In
                values: ["frontend"]
          topologyKey: kubernetes.io/hostname
resources:
  requests:
    cpu: 50m
    memory: 64Mi
  limits:
    cpu: 200m
    memory: 128Mi
env:
  plain:
    VITE_SERVER_URL: "/api"
    VITE_NEWS_INTERVAL_IN_MIN: "5"
    BACKEND_SERVICE_HOST: "backend.default.svc.cluster.local"
    BACKEND_SERVICE_PORT: "8080"
ingress:
  enabled: true
  className: nginx
  certManagerClusterIssuer: letsencrypt-dns01-cloudflare
  hosts:
    - host: newsapp.weblightenment.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - hosts: ["newsapp.weblightenment.com"]
      secretName: newsapp-tls
hpa:
  enabled: false

// values/postgres/dev.yaml
# values/postgres/dev.yaml
service:
  name: postgresql-dev
  port: 5432
  type: ClusterIP

storage:
  size: 10Gi
  storageClassName: "local-db-dev"

dbName: newsdb_dev

existingSecret:
  name: postgres-credentials
  userKey: POSTGRES_USER
  passwordKey: POSTGRES_PASSWORD

nodeSelector:
  role: database

tolerations:
  - key: "role"
    operator: "Equal"
    value: "database"
    effect: "NoSchedule"

resources:
  requests:
    cpu: 100m
    memory: 256Mi
  limits:
    memory: 512Mi

// values/postgres/prod.yaml
# values/postgres/prod.yaml
service:
  name: postgresql-prod
  port: 5432
  type: ClusterIP

storage:
  size: 20Gi
  storageClassName: "local-db-prod"

dbName: newsdb_prod

existingSecret:
  name: postgres-credentials
  userKey: POSTGRES_USER
  passwordKey: POSTGRES_PASSWORD

nodeSelector:
  role: database

tolerations:
  - key: "role"
    operator: "Equal"
    value: "database"
    effect: "NoSchedule"

resources:
  requests:
    cpu: 200m
    memory: 512Mi
  limits:
    memory: 1Gi
