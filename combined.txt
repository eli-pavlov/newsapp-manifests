// charts/app/.helmignore
.git/
.github/
.vscode/
*.swp
*.bak
*.tmp

// charts/app/Chart.yaml
apiVersion: v2
name: app
description: Generic deployment chart for simple web apps (backend/frontend)
type: application
version: 0.1.0
appVersion: "1.0.0"

// charts/app/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "app.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "app.name" . }}
  annotations:
    {{- /* Sync waves: backend=1, frontend=2 */ -}}
    {{- $wave := "1" -}}
    {{- if eq .Values.app.type "frontend" }}{{- $wave = "2" }}{{- end }}
    argocd.argoproj.io/sync-wave: "{{ $wave }}"
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "app.name" . }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "app.name" . }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.podSecurityContext }}
      securityContext:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
      {{- end }}
      containers:
        - name: {{ include "app.name" . }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- with .Values.containerSecurityContext }}
          securityContext:
{{ toYaml . | indent 12 }}
          {{- end }}
          ports:
            - containerPort: {{ .Values.service.port }}
              name: http
              {{- if .Values.service.hostPort }}
              hostPort: {{ .Values.service.hostPort }}
              {{- end }}
          # Always pass the pod's namespace (used by FE nginx entrypoint for backend DNS)
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            {{- range $k, $v := .Values.env.plain }}
            - name: {{ $k }}
              value: "{{ $v }}"
            {{- end }}
          {{- if or .Values.env.secretRef .Values.env.configRef }}
          envFrom:
            {{- if .Values.env.configRef }}
            - configMapRef: { name: {{ .Values.env.configRef }} }
            {{- end }}
            {{- if .Values.env.secretRef }}
            - secretRef: { name: {{ .Values.env.secretRef }} }
            {{- end }}
          {{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}

// charts/app/templates/hpa.yaml
{{- /*
Defensive HPA template:
- Works even if `hpa:` block is not present in values.
- Uses defaults from charts/app/values.yaml, but still guards against nil.
*/ -}}
{{- $hpa := .Values.hpa | default dict -}}
{{- if and ($hpa.enabled) }}
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ include "app.fullname" . }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ include "app.fullname" . }}
  minReplicas: {{ default 1 $hpa.minReplicas }}
  maxReplicas: {{ default 3 $hpa.maxReplicas }}
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: {{ default 80 $hpa.targetCPUUtilizationPercentage }}
    {{- if $hpa.targetMemoryUtilizationPercentage }}
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: {{ $hpa.targetMemoryUtilizationPercentage }}
    {{- end }}
{{- end }}

// charts/app/templates/ingress.yaml
{{- if and (hasKey .Values "ingress") (.Values.ingress.enabled) }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ include "app.fullname" . }}
  {{- with .Values.ingress.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  {{- with .Values.ingress.className }}
  ingressClassName: {{ . }}
  {{- end }}
  rules:
    {{- range .Values.ingress.hosts }}
    - host: {{ .host | quote }}
      http:
        paths:
          {{- range .paths }}
          - path: {{ .path }}
            pathType: {{ .pathType | default "Prefix" }}
            backend:
              service:
                name: {{ include "app.fullname" $ }}
                port:
                  number: {{ $.Values.service.port }}
          {{- end }}
    {{- end }}
  {{- with .Values.ingress.tls }}
  tls:
    {{- toYaml . | nindent 4 }}
  {{- end }}
{{- end }}

// charts/app/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: {{ include "app.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "app.name" . }}
  annotations:
    {{- /* Sync waves: backend=1, frontend=2 */ -}}
    {{- $wave := "1" -}}
    {{- if eq .Values.app.type "frontend" }}{{- $wave = "2" }}{{- end }}
    argocd.argoproj.io/sync-wave: "{{ $wave }}"
spec:
  type: {{ .Values.service.type }}
  selector:
    app.kubernetes.io/name: {{ include "app.name" . }}
  ports:
    - name: http
      port: {{ .Values.service.port }}
      targetPort: {{ .Values.service.port }}
      {{- if and (eq .Values.service.type "NodePort") .Values.service.nodePort }}
      nodePort: {{ .Values.service.nodePort }}
      {{- end }}

// charts/app/templates/_helpers.tpl
{{- define "app.name" -}}
{{- if .Values.nameOverride }}{{- .Values.nameOverride | trunc 63 | trimSuffix "-" -}}
{{- else }}{{- .Chart.Name | trunc 63 | trimSuffix "-" -}}{{- end -}}
{{- end }}

{{- define "app.fullname" -}}
{{- if .Values.fullnameOverride }}{{- .Values.fullnameOverride | trunc 63 | trimSuffix "-" -}}
{{- else -}}
{{- $name := include "app.name" . -}}
{{- if contains $name .Release.Name }}{{ .Release.Name | trunc 63 | trimSuffix "-" }}
{{- else }}{{ printf "%s-%s" .Release.Name $name | trunc 63 | trimSuffix "-" }}{{- end -}}
{{- end -}}
{{- end }}

{{- define "app.component" -}}
{{- if .Values.app.name }}{{ .Values.app.name | trunc 63 | trimSuffix "-" }}{{ else }}{{ .Chart.Name | trunc 63 | trimSuffix "-" }}{{ end -}}
{{- end }}

{{- define "app.labels" -}}
app.kubernetes.io/name: {{ include "app.name" . }}
app.kubernetes.io/instance: {{ .Release.Name }}
app.kubernetes.io/component: {{ include "app.component" . }}
{{- end }}

{{- define "app.selectorLabels" -}}
app.kubernetes.io/component: {{ include "app.component" . }}
{{- end }}

// charts/app/values.yaml
app:
  name: app
  type: backend # or "frontend"

image:
  repository: ""
  tag: "latest"
  pullPolicy: IfNotPresent

replicaCount: 1

service:
  type: ClusterIP      # ClusterIP | NodePort
  port: 8080          # container & service port for the app. Default changed to 8080.
  nodePort: null      # e.g. 30080 for frontend NodePort
  hostPort: null

# Pod-level security context. Applied to all containers in the pod.
# https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 101      # Corresponds to the 'nginx' user in the alpine image
  runAsGroup: 101     # Corresponds to the 'nginx' group
  fsGroup: 101        # Ensures mounted volumes are writable by the nginx group

# Container-level security context. Can override pod-level settings.
# https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
containerSecurityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL

resources: {}

nodeSelector: {}
tolerations: []
affinity: []

imagePullSecrets: []

env:
  plain: {}      # e.g. VITE_* or DB_ENGINE_TYPE
  secretRef: ""  # e.g. backend-secrets (DB_URI)
  configRef: ""

# >>> Add this block to prevent nil-pointer in the HPA template
hpa:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts: []
  tls: []

// charts/newsapp/Chart.yaml
apiVersion: v2
name: newsapp
description: Umbrella chart for frontend + backend (no in-cluster DB)
type: application
version: 0.2.0
appVersion: "1.0.0"

dependencies:
  - name: app
    alias: backend
    repository: "file://../app"
    version: "0.1.0"
  - name: app
    alias: frontend
    repository: "file://../app"
    version: "0.1.0"
  - name: postgres
    alias: db
    repository: "file://../postgres"
    version: "0.1.0"
    condition: db.enabled

// charts/newsapp/values.schema.json
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "properties": {
    "backend":  { "type": "object" },
    "frontend": { "type": "object" },
    "db":       { "type": "object" }
  },
  "additionalProperties": false
}

// charts/newsapp/values.yaml
# Intentionally empty; we pass env-specific value files from Argo CD.
# Values come from env-specific files chosen by Argo CD.

// charts/postgres/.helmignore
.git/
.github/
.vscode/
*.swp
*.bak
*.tmp

// charts/postgres/Chart.yaml
apiVersion: v2
name: postgres
description: Lightweight PostgreSQL StatefulSet (uses an existing Secret for creds)
type: application
version: 0.1.0
appVersion: "16"

// charts/postgres/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: {{ include "postgres.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "postgres.fullname" . }}
spec:
  type: {{ .Values.service.type }}
  selector:
    app.kubernetes.io/name: {{ include "postgres.fullname" . }}
  ports:
    - name: postgres
      port: {{ .Values.service.port }}
      targetPort: 5432

// charts/postgres/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "postgres.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "postgres.fullname" . }}
spec:
  serviceName: {{ include "postgres.fullname" . }}
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "postgres.fullname" . }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "postgres.fullname" . }}
    spec:
      containers:
        - name: postgres
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: 5432
              name: postgres
          env:
            - name: POSTGRES_DB
              value: {{ .Values.dbName | quote }}
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.existingSecret.name }}
                  key:  {{ .Values.existingSecret.userKey }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.existingSecret.name }}
                  key:  {{ .Values.existingSecret.passwordKey }}
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
      # If you want a pod-level fsGroup, uncomment and align with your cluster:
      # securityContext:
      #   fsGroup: 999
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.storage.size | quote }}
        {{- if .Values.storage.storageClassName }}
        storageClassName: {{ .Values.storage.storageClassName | quote }}
        {{- end }}

// charts/postgres/templates/_helpers.tpl
{{- define "postgres.name" -}}
{{- if .Values.service.name -}}
{{ .Values.service.name | trunc 63 | trimSuffix "-" }}
{{- else -}}
{{- default .Chart.Name .Chart.Name | trunc 63 | trimSuffix "-" -}}
{{- end -}}
{{- end }}

{{- define "postgres.fullname" -}}
{{ include "postgres.name" . }}
{{- end }}

// charts/postgres/values.yaml
image:
  repository: postgres
  tag: "16-alpine"
  pullPolicy: IfNotPresent

# Service and naming
service:
  name: postgresql        # override per env: postgresql-dev / postgresql-prod
  port: 5432
  type: ClusterIP

# Storage (uses cluster default StorageClass when empty)
storage:
  size: 10Gi
  storageClassName: ""    # e.g. "local-path" for K3s; leave empty to use default

resources: {}

# Run postgres as the image's default user; if you want fsGroup, uncomment:
# securityContext:
#   fsGroup: 999

# Use credentials from an existing Secret created by bootstrap:
existingSecret:
  name: postgres-credentials   # must exist in the namespace
  userKey: POSTGRES_USER
  passwordKey: POSTGRES_PASSWORD

# Name of the application database to create
dbName: appdb

// clusters/dev/apps/stack.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: newsapp-dev
  namespace: argocd
spec:
  project: newsapp-dev
  destination:
    server: https://kubernetes.default.svc
    namespace: development
  sources:
    - repoURL: https://github.com/eli-pavlov/newsapp-manifests.git
      targetRevision: main
      path: charts/newsapp
      helm:
        releaseName: newsapp
        valueFiles:
          - values/backend/dev.yaml
          - values/frontend/dev.yaml
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - ApplyOutOfSyncOnly=true
      - RespectIgnoreDifferences=true

// clusters/dev/project.yaml
﻿apiVersion: argoproj.io/v1alpha1
kind: AppProject
metadata:
  name: newsapp-dev
  namespace: argocd
spec:
  description: Development project for newsapp
  sourceRepos:
    - https://github.com/eli-pavlov/newsapp-manifests.git
  destinations:
    - namespace: development
      server: https://kubernetes.default.svc
  clusterResourceWhitelist:
    - group: '*'
      kind: '*'
  namespaceResourceWhitelist:
    - group: '*'
      kind: '*'

// clusters/prod/apps/stack.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: newsapp-prod
  namespace: argocd
spec:
  project: newsapp-prod
  destination:
    server: https://kubernetes.default.svc
    namespace: default
  sources:
    - repoURL: https://github.com/eli-pavlov/newsapp-manifests.git
      targetRevision: main
      path: charts/newsapp
      helm:
        releaseName: newsapp
        valueFiles:
          - values/backend/prod.yaml
          - values/frontend/prod.yaml
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - ApplyOutOfSyncOnly=true
      - RespectIgnoreDifferences=true

// clusters/prod/project.yaml
﻿apiVersion: argoproj.io/v1alpha1
kind: AppProject
metadata:
  name: newsapp-prod
  namespace: argocd
spec:
  description: Production project for newsapp
  sourceRepos:
    - https://github.com/eli-pavlov/newsapp-manifests.git
  destinations:
    - namespace: default
      server: https://kubernetes.default.svc
  clusterResourceWhitelist:
    - group: '*'
      kind: '*'
  namespaceResourceWhitelist:
    - group: '*'
      kind: '*'

// combined.txt
// charts/app/.helmignore
.git/
.github/
.vscode/
*.swp
*.bak
*.tmp

// charts/app/Chart.yaml
apiVersion: v2
name: app
description: Generic deployment chart for simple web apps (backend/frontend)
type: application
version: 0.1.0
appVersion: "1.0.0"

// charts/app/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "app.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "app.name" . }}
  annotations:
    {{- /* Sync waves: backend=1, frontend=2 */ -}}
    {{- $wave := "1" -}}
    {{- if eq .Values.app.type "frontend" }}{{- $wave = "2" }}{{- end }}
    argocd.argoproj.io/sync-wave: "{{ $wave }}"
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "app.name" . }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "app.name" . }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.podSecurityContext }}
      securityContext:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
      {{- end }}
      containers:
        - name: {{ include "app.name" . }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- with .Values.containerSecurityContext }}
          securityContext:
{{ toYaml . | indent 12 }}
          {{- end }}
          ports:
            - containerPort: {{ .Values.service.port }}
              name: http
              {{- if .Values.service.hostPort }}
              hostPort: {{ .Values.service.hostPort }}
              {{- end }}
          # Always pass the pod's namespace (used by FE nginx entrypoint for backend DNS)
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            {{- range $k, $v := .Values.env.plain }}
            - name: {{ $k }}
              value: "{{ $v }}"
            {{- end }}
          {{- if or .Values.env.secretRef .Values.env.configRef }}
          envFrom:
            {{- if .Values.env.configRef }}
            - configMapRef: { name: {{ .Values.env.configRef }} }
            {{- end }}
            {{- if .Values.env.secretRef }}
            - secretRef: { name: {{ .Values.env.secretRef }} }
            {{- end }}
          {{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}

// charts/app/templates/hpa.yaml
{{- /*
Defensive HPA template:
- Works even if `hpa:` block is not present in values.
- Uses defaults from charts/app/values.yaml, but still guards against nil.
*/ -}}
{{- $hpa := .Values.hpa | default dict -}}
{{- if and ($hpa.enabled) }}
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ include "app.fullname" . }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ include "app.fullname" . }}
  minReplicas: {{ default 1 $hpa.minReplicas }}
  maxReplicas: {{ default 3 $hpa.maxReplicas }}
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: {{ default 80 $hpa.targetCPUUtilizationPercentage }}
    {{- if $hpa.targetMemoryUtilizationPercentage }}
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: {{ $hpa.targetMemoryUtilizationPercentage }}
    {{- end }}
{{- end }}

// charts/app/templates/ingress.yaml
{{- if and (hasKey .Values "ingress") (.Values.ingress.enabled) }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ include "app.fullname" . }}
  {{- with .Values.ingress.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  {{- with .Values.ingress.className }}
  ingressClassName: {{ . }}
  {{- end }}
  rules:
    {{- range .Values.ingress.hosts }}
    - host: {{ .host | quote }}
      http:
        paths:
          {{- range .paths }}
          - path: {{ .path }}
            pathType: {{ .pathType | default "Prefix" }}
            backend:
              service:
                name: {{ include "app.fullname" $ }}
                port:
                  number: {{ $.Values.service.port }}
          {{- end }}
    {{- end }}
  {{- with .Values.ingress.tls }}
  tls:
    {{- toYaml . | nindent 4 }}
  {{- end }}
{{- end }}

// charts/app/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: {{ include "app.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "app.name" . }}
  annotations:
    {{- /* Sync waves: backend=1, frontend=2 */ -}}
    {{- $wave := "1" -}}
    {{- if eq .Values.app.type "frontend" }}{{- $wave = "2" }}{{- end }}
    argocd.argoproj.io/sync-wave: "{{ $wave }}"
spec:
  type: {{ .Values.service.type }}
  selector:
    app.kubernetes.io/name: {{ include "app.name" . }}
  ports:
    - name: http
      port: {{ .Values.service.port }}
      targetPort: {{ .Values.service.port }}
      {{- if and (eq .Values.service.type "NodePort") .Values.service.nodePort }}
      nodePort: {{ .Values.service.nodePort }}
      {{- end }}

// charts/app/templates/_helpers.tpl
{{- define "app.name" -}}
{{- if .Values.nameOverride }}{{- .Values.nameOverride | trunc 63 | trimSuffix "-" -}}
{{- else }}{{- .Chart.Name | trunc 63 | trimSuffix "-" -}}{{- end -}}
{{- end }}

{{- define "app.fullname" -}}
{{- if .Values.fullnameOverride }}{{- .Values.fullnameOverride | trunc 63 | trimSuffix "-" -}}
{{- else -}}
{{- $name := include "app.name" . -}}
{{- if contains $name .Release.Name }}{{ .Release.Name | trunc 63 | trimSuffix "-" }}
{{- else }}{{ printf "%s-%s" .Release.Name $name | trunc 63 | trimSuffix "-" }}{{- end -}}
{{- end -}}
{{- end }}

{{- define "app.component" -}}
{{- if .Values.app.name }}{{ .Values.app.name | trunc 63 | trimSuffix "-" }}{{ else }}{{ .Chart.Name | trunc 63 | trimSuffix "-" }}{{ end -}}
{{- end }}

{{- define "app.labels" -}}
app.kubernetes.io/name: {{ include "app.name" . }}
app.kubernetes.io/instance: {{ .Release.Name }}
app.kubernetes.io/component: {{ include "app.component" . }}
{{- end }}

{{- define "app.selectorLabels" -}}
app.kubernetes.io/component: {{ include "app.component" . }}
{{- end }}

// charts/app/values.yaml
app:
  name: app
  type: backend # or "frontend"

image:
  repository: ""
  tag: "latest"
  pullPolicy: IfNotPresent

replicaCount: 1

service:
  type: ClusterIP      # ClusterIP | NodePort
  port: 8080          # container & service port for the app. Default changed to 8080.
  nodePort: null      # e.g. 30080 for frontend NodePort
  hostPort: null

# Pod-level security context. Applied to all containers in the pod.
# https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 101      # Corresponds to the 'nginx' user in the alpine image
  runAsGroup: 101     # Corresponds to the 'nginx' group
  fsGroup: 101        # Ensures mounted volumes are writable by the nginx group

# Container-level security context. Can override pod-level settings.
# https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
containerSecurityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL

resources: {}

nodeSelector: {}
tolerations: []
affinity: []

imagePullSecrets: []

env:
  plain: {}      # e.g. VITE_* or DB_ENGINE_TYPE
  secretRef: ""  # e.g. backend-secrets (DB_URI)
  configRef: ""

# >>> Add this block to prevent nil-pointer in the HPA template
hpa:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts: []
  tls: []

// charts/newsapp/Chart.yaml
apiVersion: v2
name: newsapp
description: Umbrella chart for frontend + backend (no in-cluster DB)
type: application
version: 0.2.0
appVersion: "1.0.0"

dependencies:
  - name: app
    alias: backend
    repository: "file://../app"
    version: "0.1.0"
  - name: app
    alias: frontend
    repository: "file://../app"
    version: "0.1.0"

// charts/newsapp/values.schema.json
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "properties": {
    "backend":  { "type": "object" },
    "frontend": { "type": "object" }
  },
  "additionalProperties": false
}

// charts/newsapp/values.yaml
# Intentionally empty; we pass env-specific value files from Argo CD.
# Values come from env-specific files chosen by Argo CD.

// clusters/dev/apps/stack.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: newsapp-dev
  namespace: argocd
spec:
  project: newsapp-dev
  destination:
    server: https://kubernetes.default.svc
    namespace: development
  sources:
    - repoURL: https://github.com/eli-pavlov/newsapp-manifests.git
      targetRevision: main
      path: charts/newsapp
      helm:
        releaseName: newsapp
        valueFiles:
          - values/backend/dev.yaml
          - values/frontend/dev.yaml
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - ApplyOutOfSyncOnly=true
      - RespectIgnoreDifferences=true

// clusters/dev/project.yaml
﻿apiVersion: argoproj.io/v1alpha1
kind: AppProject
metadata:
  name: newsapp-dev
  namespace: argocd
spec:
  description: Development project for newsapp
  sourceRepos:
    - https://github.com/eli-pavlov/newsapp-manifests.git
  destinations:
    - namespace: development
      server: https://kubernetes.default.svc
  clusterResourceWhitelist:
    - group: '*'
      kind: '*'
  namespaceResourceWhitelist:
    - group: '*'
      kind: '*'

// clusters/prod/apps/stack.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: newsapp-prod
  namespace: argocd
spec:
  project: newsapp-prod
  destination:
    server: https://kubernetes.default.svc
    namespace: default
  sources:
    - repoURL: https://github.com/eli-pavlov/newsapp-manifests.git
      targetRevision: main
      path: charts/newsapp
      helm:
        releaseName: newsapp
        valueFiles:
          - values/backend/prod.yaml
          - values/frontend/prod.yaml
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - ApplyOutOfSyncOnly=true
      - RespectIgnoreDifferences=true

// clusters/prod/project.yaml
﻿apiVersion: argoproj.io/v1alpha1
kind: AppProject
metadata:
  name: newsapp-prod
  namespace: argocd
spec:
  description: Production project for newsapp
  sourceRepos:
    - https://github.com/eli-pavlov/newsapp-manifests.git
  destinations:
    - namespace: default
      server: https://kubernetes.default.svc
  clusterResourceWhitelist:
    - group: '*'
      kind: '*'
  namespaceResourceWhitelist:
    - group: '*'
      kind: '*'

// needed_envs
VITE_SERVER_URL= {{VITE_SERVER_URL}}
VITE_NEWS_INTERVAL_IN_MIN= {{VITE_NEWS_INTERVAL_IN_MIN}}
# MONGO | MONGOOSE | POSTGRES | MYSQL
DB_ENGINE_TYPE={{DB_ENGINE_TYPE}}
# connection string : [protocol]://[username]:[password]@[host]/[database name]
DB_URI={{DB_URI}}

// values/backend/dev.yaml
backend:
  app: { name: backend, type: backend }
  fullnameOverride: backend

  image:
    repository: elipavlov/newsapp-backend
    tag: dev-local   # CI updates

  service:
    type: ClusterIP
    port: 8080

  env:
    plain:
      DB_ENGINE_TYPE: "POSTGRES"  # optional duplicate (also present in Secret)
    secretRef: backend-db-env

// values/backend/prod.yaml
app: {name: backend, type: backend}
fullnameOverride: backend
image:
  repository: elipavlov/newsapp-backend
  tag: latest-66766bc # CI updates
service:
  type: ClusterIP
  port: 8080
env:
  plain:
    DB_ENGINE_TYPE: "POSTGRES"
  secretRef: backend-db-env
backend:
  image:
    repository: elipavlov/newsapp-backend
    tag: latest-66766bc

// values/frontend/dev.yaml
frontend:
  app: { name: frontend, type: frontend }

  image:
    repository: elipavlov/newsapp-frontend
    tag: dev-local  # CI updates

  service:
    type: ClusterIP
    port: 8080

  nodeSelector: { kubernetes.io/hostname: node-1 }

  env:
    plain:
      VITE_SERVER_URL: "/api"
      VITE_NEWS_INTERVAL_IN_MIN: "5"
      BACKEND_SERVICE_HOST: "backend.development.svc.cluster.local"
      BACKEND_SERVICE_PORT: "8080"

  ingress:
    enabled: true
    className: nginx
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /$1
      cert-manager.io/cluster-issuer: letsencrypt-staging
    hosts:
      - host: newsapp-dev.weblightenment.com
        paths:
          - path: /(.*)
            pathType: Prefix
    tls:
      - hosts: ["newsapp-dev.weblightenment.com"]
        secretName: newsapp-dev-tls

// values/frontend/prod.yaml
frontend:
  app: {name: frontend, type: frontend}
  image:
    repository: elipavlov/newsapp-frontend
    tag: latest-ec40111 # CI updates
  service:
    type: ClusterIP
    port: 8080
  nodeSelector: {kubernetes.io/hostname: node-1}
  env:
    plain:
      VITE_SERVER_URL: "/api"
      VITE_NEWS_INTERVAL_IN_MIN: "5"
      BACKEND_SERVICE_HOST: "" # CI fills
      BACKEND_SERVICE_PORT: "" # CI fills
  ingress:
    enabled: true
    className: nginx
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /$1
      cert-manager.io/cluster-issuer: letsencrypt-prod
    hosts:
      - host: newsapp.weblightenment.com
        paths:
          - path: /(.*)
            pathType: Prefix
    tls:
      - hosts: ["newsapp.weblightenment.com"]
        secretName: newsapp-tls

// needed_envs
VITE_SERVER_URL= {{VITE_SERVER_URL}}
VITE_NEWS_INTERVAL_IN_MIN= {{VITE_NEWS_INTERVAL_IN_MIN}}
# MONGO | MONGOOSE | POSTGRES | MYSQL
DB_ENGINE_TYPE={{DB_ENGINE_TYPE}}
# connection string : [protocol]://[username]:[password]@[host]/[database name]
DB_URI={{DB_URI}}

// values/backend/dev.yaml
backend:
  app: { name: backend, type: backend }
  fullnameOverride: backend

  image:
    repository: elipavlov/newsapp-backend
    tag: dev-local   # CI updates

  service:
    type: ClusterIP
    port: 8080

  env:
    plain:
      DB_ENGINE_TYPE: "POSTGRES"
    # Use the connection string secret created by bootstrap:
    secretRef: backend-db-connection

# --- Add the in-cluster DB (dev) ---
db:
  enabled: true
  service:
    name: postgresql-dev
    port: 5432
    type: ClusterIP
  dbName: newsdb_dev
  existingSecret:
    name: postgres-credentials
    userKey: POSTGRES_USER
    passwordKey: POSTGRES_PASSWORD
  storage:
    size: 10Gi
    # storageClassName: "local-path"  # uncomment if you want to pin it

// values/backend/prod.yaml
app: {name: backend, type: backend}
fullnameOverride: backend
image:
  repository: elipavlov/newsapp-backend
  tag: latest-66766bc # CI updates
service:
  type: ClusterIP
  port: 8080
env:
  plain:
    DB_ENGINE_TYPE: "POSTGRES"
  # Use the connection string secret created by bootstrap:
  secretRef: backend-db-connection

backend:
  image:
    repository: elipavlov/newsapp-backend
    tag: latest-66766bc

# --- Add the in-cluster DB (prod) ---
db:
  enabled: true
  service:
    name: postgresql-prod
    port: 5432
    type: ClusterIP
  dbName: newsdb_prod
  existingSecret:
    name: postgres-credentials
    userKey: POSTGRES_USER
    passwordKey: POSTGRES_PASSWORD
  storage:
    size: 20Gi
    # storageClassName: "local-path"

// values/frontend/dev.yaml
frontend:
  app: { name: frontend, type: frontend }

  image:
    repository: elipavlov/newsapp-frontend
    tag: dev-local  # CI updates

  service:
    type: ClusterIP
    port: 8080

  nodeSelector: { kubernetes.io/hostname: node-1 }

  env:
    plain:
      VITE_SERVER_URL: "/api"
      VITE_NEWS_INTERVAL_IN_MIN: "5"
      BACKEND_SERVICE_HOST: "backend.development.svc.cluster.local"
      BACKEND_SERVICE_PORT: "8080"

  ingress:
    enabled: true
    className: nginx
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /$1
      cert-manager.io/cluster-issuer: letsencrypt-staging
    hosts:
      - host: newsapp-dev.weblightenment.com
        paths:
          - path: /(.*)
            pathType: Prefix
    tls:
      - hosts: ["newsapp-dev.weblightenment.com"]
        secretName: newsapp-dev-tls

// values/frontend/prod.yaml
frontend:
  app: {name: frontend, type: frontend}
  image:
    repository: elipavlov/newsapp-frontend
    tag: latest-ec40111 # CI updates
  service:
    type: ClusterIP
    port: 8080
  nodeSelector: {kubernetes.io/hostname: node-1}
  env:
    plain:
      VITE_SERVER_URL: "/api"
      VITE_NEWS_INTERVAL_IN_MIN: "5"
      BACKEND_SERVICE_HOST: "" # CI fills
      BACKEND_SERVICE_PORT: "" # CI fills
  ingress:
    enabled: true
    className: nginx
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /$1
      cert-manager.io/cluster-issuer: letsencrypt-prod
    hosts:
      - host: newsapp.weblightenment.com
        paths:
          - path: /(.*)
            pathType: Prefix
    tls:
      - hosts: ["newsapp.weblightenment.com"]
        secretName: newsapp-tls
