apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: argocd-server-ingress
  namespace: argocd
  annotations:
    kubernetes.io/ingress.class: "nginx"
    # Terminate TLS at nginx. Proxy upstream with HTTPS to ArgoCD's internal TLS.
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    nginx.ingress.kubernetes.io/proxy-ssl-verify: "off"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    # Ensure ArgoCD sees original proto; helps avoid redirect loops if ArgoCD redirects
    nginx.ingress.kubernetes.io/configuration-snippet: |
      proxy_set_header X-Forwarded-Proto https;
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    # Tell cert-manager to provision the TLS secret referenced below
    cert-manager.io/cluster-issuer: "letsencrypt-dns01-cloudflare"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - argocd.weblightenment.com
      secretName: argocd-tls
  rules:
    - host: argocd.weblightenment.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: argocd-server
                # When proxying to ArgoCD's TLS port. If your argocd-server service exposes 443,
                # use 443; if it exposes another port, adjust to match your service.
                port:
                  number: 443
