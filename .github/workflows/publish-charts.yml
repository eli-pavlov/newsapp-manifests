name: Publish Helm charts to gh-pages

on:
  push:
    paths:
      - 'charts/**'
    branches:
      - main
  workflow_dispatch: {}

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  publish:
    runs-on: ubuntu-latest
    env:
      OUT_DIR: out
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq "https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64"
          sudo chmod +x /usr/local/bin/yq

      - name: Determine owner/repo & published URL
        id: repoinfo
        run: |
          echo "owner=$(echo $GITHUB_REPOSITORY | cut -d/ -f1)" >> $GITHUB_OUTPUT
          echo "repo=$(echo $GITHUB_REPOSITORY | cut -d/ -f2)" >> $GITHUB_OUTPUT
          echo "url=https://${GITHUB_REPOSITORY_OWNER}.github.io/$(echo $GITHUB_REPOSITORY | cut -d/ -f2)" >> $GITHUB_OUTPUT

      - name: Prepare output directory
        run: |
          rm -rf $OUT_DIR
          mkdir -p $OUT_DIR

      - name: Package changed charts
        id: package
        run: |
          set -euo pipefail
          SHORT=${GITHUB_SHA:0:7}
          PACKED=""
          # list charts you want to publish; adjust as needed
          CHARTS_TO_PUBLISH=(charts/app charts/postgres)

          for CH in "${CHARTS_TO_PUBLISH[@]}"; do
            if [ -d "${CH}" ]; then
              base=$(basename "${CH}")
              version=$(yq -r '.version' "${CH}/Chart.yaml")
              # construct a traceable prerelease version: <version>-dev.<shortsha>
              newver="${version}-dev.${SHORT}"
              echo "Packaging ${CH} -> version ${newver}"
              helm package "${CH}" -d $OUT_DIR --version "${newver}"
              PACKED="${PACKED} ${base}@${newver}"
            else
              echo "Skipping ${CH}: not present"
            fi
          done

          if [ -z "${PACKED}" ]; then
            echo "::warning::No charts packaged (no chart dirs found)"
            echo "packed=false" >> $GITHUB_OUTPUT
          else
            echo "packed=${PACKED}" >> $GITHUB_OUTPUT
            echo "packed=true" >> $GITHUB_OUTPUT
          fi

      - name: Create/update Helm repo index
        if: steps.package.outputs.packed == 'true'
        run: |
          set -euo pipefail
          INDEX_URL="${{ steps.repoinfo.outputs.url }}"
          helm repo index $OUT_DIR --url "${INDEX_URL}"

      - name: Publish to gh-pages (push out/ to gh-pages)
        if: steps.package.outputs.packed == 'true'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./out
          # optional: publish branch can be changed; default is gh-pages
          # publish_branch: gh-pages
