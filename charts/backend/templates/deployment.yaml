apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "backend.fullname" . }}
  labels:
    {{- include "backend.labels" . | nindent 4 }}
  annotations:
    argocd.argoproj.io/sync-wave: {{ .Values.app.syncWave | default "1" | quote }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "backend.name" . }}
      app.kubernetes.io/component: {{ include "backend.component" . }}
  template:
    metadata:
      labels:
        {{- include "backend.labels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.podSecurityContext }}
      securityContext:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
      {{- end }}

      {{- /* Compute DB-related template variables outside the literal block to avoid breaking YAML */ -}}
      {{- $dbSelector := .Values.networkPolicy.backendEgressDb.dbSelector.matchLabels | default dict }}
      {{- $dbName := (index $dbSelector "app.kubernetes.io/name") | default "postgresql" }}
      {{- $ns := .Values.networkPolicy.backendEgressDb.dbNamespace | default .Release.Namespace | default "development" }}
      {{- $port := .Values.networkPolicy.backendEgressDb.dbPort | default 5432 }}
      volumes:
        - name: uploads-dir
          emptyDir: {}
      initContainers:
        - name: wait-for-db
          image: postgres:17-alpine
          command:
            - sh
            - -c
            - |
              #!/bin/sh
              i=0
              while [ $i -lt 60 ]; do
                i=$((i + 1))
                if pg_isready -h {{ printf "%s-client.%s.svc.cluster.local" $dbName $ns }} -p {{ $port }} >/dev/null 2>&1; then
                  echo "DB is ready!"
                  exit 0
                fi
                echo "Waiting for DB (attempt $i/60)..."
                sleep 5
              done

              echo "DB timeout after 5 min"
              exit 1
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 64Mi

      containers:
        - name: {{ include "backend.name" . }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.service.port }}
              name: http
          volumeMounts:
            - name: uploads-dir
              mountPath: /app/uploads
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            {{- range $k, $v := .Values.env.plain }}
            - name: {{ $k }}
              value: "{{ $v }}"
            {{- end }}
          {{- /* envFrom: support singular secretRef (back compat) and a list secretRefs (preferred) */ -}}
          {{- $cfgRef := .Values.env.configRef -}}
          {{- $secretRef := .Values.env.secretRef -}}
          {{- $secretRefs := .Values.env.secretRefs -}}
          {{- if or $cfgRef $secretRef $secretRefs }}
          envFrom:
            {{- if $cfgRef }}
            - configMapRef: { name: {{ $cfgRef }} }
            {{- end }}

            {{- /* Support singular secretRef for backward compatibility */ -}}
            {{- if and (not $secretRefs) $secretRef }}
            - secretRef: { name: {{ $secretRef }} }
            {{- end }}

            {{- /* Support a list of secret names */ -}}
            {{- if $secretRefs }}
            {{- range $i, $s := $secretRefs }}
            - secretRef: { name: {{ $s }} }
            {{- end }}
            {{- end }}
          {{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
          {{- with .Values.probes }}
          {{- if .readiness.enabled }}
          readinessProbe:
            {{- if eq (.readiness.type | default "http") "http" }}
            httpGet:
              path: {{ .readiness.path | quote }}
              port: {{ $.Values.service.port }}
              scheme: {{ .readiness.scheme | default "HTTP" }}
            {{- else }}
            tcpSocket:
              port: {{ .readiness.port | default $.Values.service.port }}
            {{- end }}
            initialDelaySeconds: {{ .readiness.initialDelaySeconds | default 5 }}
            periodSeconds: {{ .readiness.periodSeconds | default 10 }}
            timeoutSeconds: {{ .readiness.timeoutSeconds | default 2 }}
            successThreshold: {{ .readiness.successThreshold | default 1 }}
            failureThreshold: {{ .readiness.failureThreshold | default 3 }}
          {{- end }}
          {{- if .liveness.enabled }}
          livenessProbe:
            {{- if eq (.liveness.type | default "http") "http" }}
            httpGet:
              path: {{ .liveness.path | quote }}
              port: {{ $.Values.service.port }}
              scheme: {{ .liveness.scheme | default "HTTP" }}
            {{- else }}
            tcpSocket:
              port: {{ .liveness.port | default $.Values.service.port }}
            {{- end }}
            initialDelaySeconds: {{ .liveness.initialDelaySeconds | default 30 }}
            periodSeconds: {{ .liveness.periodSeconds | default 10 }}
            timeoutSeconds: {{ .liveness.timeoutSeconds | default 2 }}
            successThreshold: {{ .liveness.successThreshold | default 1 }}
            failureThreshold: {{ .liveness.failureThreshold | default 6 }}
          {{- end }}
          {{- if and .startup .startup.enabled }}
          startupProbe:
            {{- if eq (.startup.type | default "http") "http" }}
            httpGet:
              path: {{ .startup.path | quote }}
              port: {{ .Values.service.port }}
              scheme: {{ .startup.scheme | default "HTTP" }}
            {{- else }}
            tcpSocket:
              port: {{ .startup.port | default $.Values.service.port }}
            {{- end }}
            periodSeconds: {{ .startup.periodSeconds | default 5 }}
            failureThreshold: {{ .startup.failureThreshold | default 30 }}
          {{- end }}
          {{- end }}
