apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "backend.fullname" . }}
  labels:
    {{- include "backend.labels" . | nindent 4 }}
  annotations:
    argocd.argoproj.io/sync-wave: {{ .Values.app.syncWave | default "1" | quote }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "backend.name" . }}
      app.kubernetes.io/component: {{ include "backend.component" . }}
  template:
    metadata:
      labels:
        {{- include "backend.labels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.podSecurityContext }}
      securityContext:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
      {{- end }}
      initContainers: 
        - name: wait-for-db
          image: postgres:17-alpine
          command: ['sh', '-c', 'until pg_isready -h {{ .Values.networkPolicy.backendEgressDb.dbSelector.matchLabels."app.kubernetes.io/name" }}-client -p {{ .Values.networkPolicy.backendEgressDb.dbPort }}; do echo "Waiting for DB..."; sleep 5; done']
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 64Mi
      containers:
        - name: {{ include "backend.name" . }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.service.port }}
              name: http
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            {{- range $k, $v := .Values.env.plain }}
            - name: {{ $k }}
              value: "{{ $v }}"
            {{- end }}
          {{- if or .Values.env.secretRef .Values.env.configRef }}
          envFrom:
            {{- if .Values.env.configRef }}
            - configMapRef: { name: {{ .Values.env.configRef }} }
            {{- end }}
            {{- if .Values.env.secretRef }}
            - secretRef: { name: {{ .Values.env.secretRef }} }
            {{- end }}
          {{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
          {{- with .Values.probes }}
          {{- if .readiness.enabled }}
          readinessProbe:
            {{- if eq (.readiness.type | default "http") "http" }}
            httpGet:
              path: {{ .readiness.path | quote }}
              port: {{ $.Values.service.port }}
              scheme: {{ .readiness.scheme | default "HTTP" }}
            {{- else }}
            tcpSocket:
              port: {{ .readiness.port | default $.Values.service.port }}
            {{- end }}
            initialDelaySeconds: {{ .readiness.initialDelaySeconds | default 5 }}
            periodSeconds: {{ .readiness.periodSeconds | default 10 }}
            timeoutSeconds: {{ .readiness.timeoutSeconds | default 2 }}
            successThreshold: {{ .readiness.successThreshold | default 1 }}
            failureThreshold: {{ .readiness.failureThreshold | default 3 }}
          {{- end }}
          {{- if .liveness.enabled }}
          livenessProbe:
            {{- if eq (.liveness.type | default "http") "http" }}
            httpGet:
              path: {{ .liveness.path | quote }}
              port: {{ $.Values.service.port }}
              scheme: {{ .liveness.scheme | default "HTTP" }}
            {{- else }}
            tcpSocket:
              port: {{ .liveness.port | default $.Values.service.port }}
            {{- end }}
            initialDelaySeconds: {{ .liveness.initialDelaySeconds | default 30 }}
            periodSeconds: {{ .liveness.periodSeconds | default 10 }}
            timeoutSeconds: {{ .liveness.timeoutSeconds | default 2 }}
            successThreshold: {{ .liveness.successThreshold | default 1 }}
            failureThreshold: {{ .liveness.failureThreshold | default 6 }}
          {{- end }}
          {{- if and .startup .startup.enabled }}
          startupProbe:
            {{- if eq (.startup.type | default "http") "http" }}
            httpGet:
              path: {{ .startup.path | quote }}
              port: {{ $.Values.service.port }}
              scheme: {{ .startup.scheme | default "HTTP" }}
            {{- else }}
            tcpSocket:
              port: {{ .startup.port | default $.Values.service.port }}
            {{- end }}
            periodSeconds: {{ .startup.periodSeconds | default 5 }}
            failureThreshold: {{ .startup.failureThreshold | default 30 }}
          {{- end }}
          {{- end }}